// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/shared/dxgi.h:1985
    public class IDXGIFactory : IDXGIObject // 1
    {
        static Guid s_uuid = new Guid("7b7166ec-21c7-44ae-b21a-c9ae321ae369");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int EnumAdapters(uint Adapter, ref IntPtr ppAdapter)
        {
            var fp = GetFunctionPointer(7);
            if(m_EnumAdaptersFunc==null) m_EnumAdaptersFunc = (EnumAdaptersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumAdaptersFunc));
            
            return  m_EnumAdaptersFunc(m_ptr, Adapter, ref ppAdapter);
        }
        delegate int EnumAdaptersFunc(IntPtr self, uint Adapter, ref IntPtr ppAdapter);
        EnumAdaptersFunc m_EnumAdaptersFunc;

        public int MakeWindowAssociation(HWND WindowHandle, uint Flags)
        {
            var fp = GetFunctionPointer(8);
            if(m_MakeWindowAssociationFunc==null) m_MakeWindowAssociationFunc = (MakeWindowAssociationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MakeWindowAssociationFunc));
            
            return  m_MakeWindowAssociationFunc(m_ptr, WindowHandle, Flags);
        }
        delegate int MakeWindowAssociationFunc(IntPtr self, HWND WindowHandle, uint Flags);
        MakeWindowAssociationFunc m_MakeWindowAssociationFunc;

        public int GetWindowAssociation(ref HWND pWindowHandle)
        {
            var fp = GetFunctionPointer(9);
            if(m_GetWindowAssociationFunc==null) m_GetWindowAssociationFunc = (GetWindowAssociationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWindowAssociationFunc));
            
            return  m_GetWindowAssociationFunc(m_ptr, ref pWindowHandle);
        }
        delegate int GetWindowAssociationFunc(IntPtr self, ref HWND pWindowHandle);
        GetWindowAssociationFunc m_GetWindowAssociationFunc;

        public int CreateSwapChain(IntPtr pDevice, ref DXGI_SWAP_CHAIN_DESC pDesc, ref IntPtr ppSwapChain)
        {
            var fp = GetFunctionPointer(10);
            if(m_CreateSwapChainFunc==null) m_CreateSwapChainFunc = (CreateSwapChainFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSwapChainFunc));
            
            return  m_CreateSwapChainFunc(m_ptr, pDevice, ref pDesc, ref ppSwapChain);
        }
        delegate int CreateSwapChainFunc(IntPtr self, IntPtr pDevice, ref DXGI_SWAP_CHAIN_DESC pDesc, ref IntPtr ppSwapChain);
        CreateSwapChainFunc m_CreateSwapChainFunc;

        public int CreateSoftwareAdapter(HMODULE Module, ref IntPtr ppAdapter)
        {
            var fp = GetFunctionPointer(11);
            if(m_CreateSoftwareAdapterFunc==null) m_CreateSoftwareAdapterFunc = (CreateSoftwareAdapterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSoftwareAdapterFunc));
            
            return  m_CreateSoftwareAdapterFunc(m_ptr, Module, ref ppAdapter);
        }
        delegate int CreateSoftwareAdapterFunc(IntPtr self, HMODULE Module, ref IntPtr ppAdapter);
        CreateSoftwareAdapterFunc m_CreateSoftwareAdapterFunc;

    }
}
