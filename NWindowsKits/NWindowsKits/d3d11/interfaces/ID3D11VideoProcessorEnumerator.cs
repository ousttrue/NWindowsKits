// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/d3d11.h:10155
    public class ID3D11VideoProcessorEnumerator : ID3D11DeviceChild
    {
        static Guid s_uuid = new Guid("31627037-53ab-4200-9061-05faa9ab45f9");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetVideoProcessorContentDesc(ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc)
        {
            if(m_GetVideoProcessorContentDescFunc==null){
                var fp = GetFunctionPointer(7);
                m_GetVideoProcessorContentDescFunc = (GetVideoProcessorContentDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorContentDescFunc));
            } 
            return  m_GetVideoProcessorContentDescFunc(m_ptr, ref pContentDesc);
        }
        delegate int GetVideoProcessorContentDescFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc);
        GetVideoProcessorContentDescFunc m_GetVideoProcessorContentDescFunc;

        public int CheckVideoProcessorFormat(DXGI_FORMAT Format, ref uint pFlags)
        {
            if(m_CheckVideoProcessorFormatFunc==null){
                var fp = GetFunctionPointer(8);
                m_CheckVideoProcessorFormatFunc = (CheckVideoProcessorFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckVideoProcessorFormatFunc));
            } 
            return  m_CheckVideoProcessorFormatFunc(m_ptr, Format, ref pFlags);
        }
        delegate int CheckVideoProcessorFormatFunc(IntPtr self, DXGI_FORMAT Format, ref uint pFlags);
        CheckVideoProcessorFormatFunc m_CheckVideoProcessorFormatFunc;

        public int GetVideoProcessorCaps(ref D3D11_VIDEO_PROCESSOR_CAPS pCaps)
        {
            if(m_GetVideoProcessorCapsFunc==null){
                var fp = GetFunctionPointer(9);
                m_GetVideoProcessorCapsFunc = (GetVideoProcessorCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorCapsFunc));
            } 
            return  m_GetVideoProcessorCapsFunc(m_ptr, ref pCaps);
        }
        delegate int GetVideoProcessorCapsFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_CAPS pCaps);
        GetVideoProcessorCapsFunc m_GetVideoProcessorCapsFunc;

        public int GetVideoProcessorRateConversionCaps(uint TypeIndex, ref D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps)
        {
            if(m_GetVideoProcessorRateConversionCapsFunc==null){
                var fp = GetFunctionPointer(10);
                m_GetVideoProcessorRateConversionCapsFunc = (GetVideoProcessorRateConversionCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorRateConversionCapsFunc));
            } 
            return  m_GetVideoProcessorRateConversionCapsFunc(m_ptr, TypeIndex, ref pCaps);
        }
        delegate int GetVideoProcessorRateConversionCapsFunc(IntPtr self, uint TypeIndex, ref D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps);
        GetVideoProcessorRateConversionCapsFunc m_GetVideoProcessorRateConversionCapsFunc;

        public int GetVideoProcessorCustomRate(uint TypeIndex, uint CustomRateIndex, ref D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate)
        {
            if(m_GetVideoProcessorCustomRateFunc==null){
                var fp = GetFunctionPointer(11);
                m_GetVideoProcessorCustomRateFunc = (GetVideoProcessorCustomRateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorCustomRateFunc));
            } 
            return  m_GetVideoProcessorCustomRateFunc(m_ptr, TypeIndex, CustomRateIndex, ref pRate);
        }
        delegate int GetVideoProcessorCustomRateFunc(IntPtr self, uint TypeIndex, uint CustomRateIndex, ref D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate);
        GetVideoProcessorCustomRateFunc m_GetVideoProcessorCustomRateFunc;

        public int GetVideoProcessorFilterRange(D3D11_VIDEO_PROCESSOR_FILTER Filter, ref D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange)
        {
            if(m_GetVideoProcessorFilterRangeFunc==null){
                var fp = GetFunctionPointer(12);
                m_GetVideoProcessorFilterRangeFunc = (GetVideoProcessorFilterRangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorFilterRangeFunc));
            } 
            return  m_GetVideoProcessorFilterRangeFunc(m_ptr, Filter, ref pRange);
        }
        delegate int GetVideoProcessorFilterRangeFunc(IntPtr self, D3D11_VIDEO_PROCESSOR_FILTER Filter, ref D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange);
        GetVideoProcessorFilterRangeFunc m_GetVideoProcessorFilterRangeFunc;

    }
}
