// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/d3d11.h:7498
    public class ID3D11DeviceContext : ID3D11DeviceChild
    {
        static Guid s_uuid = new Guid("c0bfa96c-e089-44fb-8eaf-26f8796190da");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_VSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(7);
                m_VSSetConstantBuffersFunc = (VSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetConstantBuffersFunc));
            } 
             m_VSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        VSSetConstantBuffersFunc m_VSSetConstantBuffersFunc;

        public void PSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_PSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(8);
                m_PSSetShaderResourcesFunc = (PSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderResourcesFunc));
            } 
             m_PSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        PSSetShaderResourcesFunc m_PSSetShaderResourcesFunc;

        public void PSSetShader(IntPtr pPixelShader, ref IntPtr ppClassInstances, uint NumClassInstances)
        {
            if(m_PSSetShaderFunc==null){
                var fp = GetFunctionPointer(9);
                m_PSSetShaderFunc = (PSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderFunc));
            } 
             m_PSSetShaderFunc(m_ptr, pPixelShader, ref ppClassInstances, NumClassInstances);
        }
        delegate void PSSetShaderFunc(IntPtr self, IntPtr pPixelShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        PSSetShaderFunc m_PSSetShaderFunc;

        public void PSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_PSSetSamplersFunc==null){
                var fp = GetFunctionPointer(10);
                m_PSSetSamplersFunc = (PSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetSamplersFunc));
            } 
             m_PSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        PSSetSamplersFunc m_PSSetSamplersFunc;

        public void VSSetShader(IntPtr pVertexShader, ref IntPtr ppClassInstances, uint NumClassInstances)
        {
            if(m_VSSetShaderFunc==null){
                var fp = GetFunctionPointer(11);
                m_VSSetShaderFunc = (VSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderFunc));
            } 
             m_VSSetShaderFunc(m_ptr, pVertexShader, ref ppClassInstances, NumClassInstances);
        }
        delegate void VSSetShaderFunc(IntPtr self, IntPtr pVertexShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        VSSetShaderFunc m_VSSetShaderFunc;

        public void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
        {
            if(m_DrawIndexedFunc==null){
                var fp = GetFunctionPointer(12);
                m_DrawIndexedFunc = (DrawIndexedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedFunc));
            } 
             m_DrawIndexedFunc(m_ptr, IndexCount, StartIndexLocation, BaseVertexLocation);
        }
        delegate void DrawIndexedFunc(IntPtr self, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);
        DrawIndexedFunc m_DrawIndexedFunc;

        public void Draw(uint VertexCount, uint StartVertexLocation)
        {
            if(m_DrawFunc==null){
                var fp = GetFunctionPointer(13);
                m_DrawFunc = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            } 
             m_DrawFunc(m_ptr, VertexCount, StartVertexLocation);
        }
        delegate void DrawFunc(IntPtr self, uint VertexCount, uint StartVertexLocation);
        DrawFunc m_DrawFunc;

        public int Map(IntPtr pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, ref D3D11_MAPPED_SUBRESOURCE pMappedResource)
        {
            if(m_MapFunc==null){
                var fp = GetFunctionPointer(14);
                m_MapFunc = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            } 
            return  m_MapFunc(m_ptr, pResource, Subresource, MapType, MapFlags, ref pMappedResource);
        }
        delegate int MapFunc(IntPtr self, IntPtr pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, ref D3D11_MAPPED_SUBRESOURCE pMappedResource);
        MapFunc m_MapFunc;

        public void Unmap(IntPtr pResource, uint Subresource)
        {
            if(m_UnmapFunc==null){
                var fp = GetFunctionPointer(15);
                m_UnmapFunc = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            } 
             m_UnmapFunc(m_ptr, pResource, Subresource);
        }
        delegate void UnmapFunc(IntPtr self, IntPtr pResource, uint Subresource);
        UnmapFunc m_UnmapFunc;

        public void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_PSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(16);
                m_PSSetConstantBuffersFunc = (PSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetConstantBuffersFunc));
            } 
             m_PSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        PSSetConstantBuffersFunc m_PSSetConstantBuffersFunc;

        public void IASetInputLayout(IntPtr pInputLayout)
        {
            if(m_IASetInputLayoutFunc==null){
                var fp = GetFunctionPointer(17);
                m_IASetInputLayoutFunc = (IASetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetInputLayoutFunc));
            } 
             m_IASetInputLayoutFunc(m_ptr, pInputLayout);
        }
        delegate void IASetInputLayoutFunc(IntPtr self, IntPtr pInputLayout);
        IASetInputLayoutFunc m_IASetInputLayoutFunc;

        public void IASetVertexBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
        {
            if(m_IASetVertexBuffersFunc==null){
                var fp = GetFunctionPointer(18);
                m_IASetVertexBuffersFunc = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            } 
             m_IASetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);
        IASetVertexBuffersFunc m_IASetVertexBuffersFunc;

        public void IASetIndexBuffer(IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset)
        {
            if(m_IASetIndexBufferFunc==null){
                var fp = GetFunctionPointer(19);
                m_IASetIndexBufferFunc = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            } 
             m_IASetIndexBufferFunc(m_ptr, pIndexBuffer, Format, Offset);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset);
        IASetIndexBufferFunc m_IASetIndexBufferFunc;

        public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
        {
            if(m_DrawIndexedInstancedFunc==null){
                var fp = GetFunctionPointer(20);
                m_DrawIndexedInstancedFunc = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            } 
             m_DrawIndexedInstancedFunc(m_ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
        DrawIndexedInstancedFunc m_DrawIndexedInstancedFunc;

        public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
        {
            if(m_DrawInstancedFunc==null){
                var fp = GetFunctionPointer(21);
                m_DrawInstancedFunc = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            } 
             m_DrawInstancedFunc(m_ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
        DrawInstancedFunc m_DrawInstancedFunc;

        public void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_GSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(22);
                m_GSSetConstantBuffersFunc = (GSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetConstantBuffersFunc));
            } 
             m_GSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        GSSetConstantBuffersFunc m_GSSetConstantBuffersFunc;

        public void GSSetShader(IntPtr pShader, ref IntPtr ppClassInstances, uint NumClassInstances)
        {
            if(m_GSSetShaderFunc==null){
                var fp = GetFunctionPointer(23);
                m_GSSetShaderFunc = (GSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderFunc));
            } 
             m_GSSetShaderFunc(m_ptr, pShader, ref ppClassInstances, NumClassInstances);
        }
        delegate void GSSetShaderFunc(IntPtr self, IntPtr pShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        GSSetShaderFunc m_GSSetShaderFunc;

        public void IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY Topology)
        {
            if(m_IASetPrimitiveTopologyFunc==null){
                var fp = GetFunctionPointer(24);
                m_IASetPrimitiveTopologyFunc = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            } 
             m_IASetPrimitiveTopologyFunc(m_ptr, Topology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D_PRIMITIVE_TOPOLOGY Topology);
        IASetPrimitiveTopologyFunc m_IASetPrimitiveTopologyFunc;

        public void VSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_VSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(25);
                m_VSSetShaderResourcesFunc = (VSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderResourcesFunc));
            } 
             m_VSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        VSSetShaderResourcesFunc m_VSSetShaderResourcesFunc;

        public void VSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_VSSetSamplersFunc==null){
                var fp = GetFunctionPointer(26);
                m_VSSetSamplersFunc = (VSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetSamplersFunc));
            } 
             m_VSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        VSSetSamplersFunc m_VSSetSamplersFunc;

        public void Begin(IntPtr pAsync)
        {
            if(m_BeginFunc==null){
                var fp = GetFunctionPointer(27);
                m_BeginFunc = (BeginFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginFunc));
            } 
             m_BeginFunc(m_ptr, pAsync);
        }
        delegate void BeginFunc(IntPtr self, IntPtr pAsync);
        BeginFunc m_BeginFunc;

        public void End(IntPtr pAsync)
        {
            if(m_EndFunc==null){
                var fp = GetFunctionPointer(28);
                m_EndFunc = (EndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndFunc));
            } 
             m_EndFunc(m_ptr, pAsync);
        }
        delegate void EndFunc(IntPtr self, IntPtr pAsync);
        EndFunc m_EndFunc;

        public int GetData(IntPtr pAsync, IntPtr pData, uint DataSize, uint GetDataFlags)
        {
            if(m_GetDataFunc==null){
                var fp = GetFunctionPointer(29);
                m_GetDataFunc = (GetDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataFunc));
            } 
            return  m_GetDataFunc(m_ptr, pAsync, pData, DataSize, GetDataFlags);
        }
        delegate int GetDataFunc(IntPtr self, IntPtr pAsync, IntPtr pData, uint DataSize, uint GetDataFlags);
        GetDataFunc m_GetDataFunc;

        public void SetPredication(IntPtr pPredicate, int PredicateValue)
        {
            if(m_SetPredicationFunc==null){
                var fp = GetFunctionPointer(30);
                m_SetPredicationFunc = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            } 
             m_SetPredicationFunc(m_ptr, pPredicate, PredicateValue);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pPredicate, int PredicateValue);
        SetPredicationFunc m_SetPredicationFunc;

        public void GSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_GSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(31);
                m_GSSetShaderResourcesFunc = (GSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderResourcesFunc));
            } 
             m_GSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        GSSetShaderResourcesFunc m_GSSetShaderResourcesFunc;

        public void GSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_GSSetSamplersFunc==null){
                var fp = GetFunctionPointer(32);
                m_GSSetSamplersFunc = (GSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetSamplersFunc));
            } 
             m_GSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        GSSetSamplersFunc m_GSSetSamplersFunc;

        public void OMSetRenderTargets(uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView)
        {
            if(m_OMSetRenderTargetsFunc==null){
                var fp = GetFunctionPointer(33);
                m_OMSetRenderTargetsFunc = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            } 
             m_OMSetRenderTargetsFunc(m_ptr, NumViews, ref ppRenderTargetViews, pDepthStencilView);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView);
        OMSetRenderTargetsFunc m_OMSetRenderTargetsFunc;

        public void OMSetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews, ref uint pUAVInitialCounts)
        {
            if(m_OMSetRenderTargetsAndUnorderedAccessViewsFunc==null){
                var fp = GetFunctionPointer(34);
                m_OMSetRenderTargetsAndUnorderedAccessViewsFunc = (OMSetRenderTargetsAndUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsAndUnorderedAccessViewsFunc));
            } 
             m_OMSetRenderTargetsAndUnorderedAccessViewsFunc(m_ptr, NumRTVs, ref ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ref ppUnorderedAccessViews, ref pUAVInitialCounts);
        }
        delegate void OMSetRenderTargetsAndUnorderedAccessViewsFunc(IntPtr self, uint NumRTVs, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews, ref uint pUAVInitialCounts);
        OMSetRenderTargetsAndUnorderedAccessViewsFunc m_OMSetRenderTargetsAndUnorderedAccessViewsFunc;

        public void OMSetBlendState(IntPtr pBlendState, ref float BlendFactor, uint SampleMask)
        {
            if(m_OMSetBlendStateFunc==null){
                var fp = GetFunctionPointer(35);
                m_OMSetBlendStateFunc = (OMSetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendStateFunc));
            } 
             m_OMSetBlendStateFunc(m_ptr, pBlendState, ref BlendFactor, SampleMask);
        }
        delegate void OMSetBlendStateFunc(IntPtr self, IntPtr pBlendState, ref float BlendFactor, uint SampleMask);
        OMSetBlendStateFunc m_OMSetBlendStateFunc;

        public void OMSetDepthStencilState(IntPtr pDepthStencilState, uint StencilRef)
        {
            if(m_OMSetDepthStencilStateFunc==null){
                var fp = GetFunctionPointer(36);
                m_OMSetDepthStencilStateFunc = (OMSetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthStencilStateFunc));
            } 
             m_OMSetDepthStencilStateFunc(m_ptr, pDepthStencilState, StencilRef);
        }
        delegate void OMSetDepthStencilStateFunc(IntPtr self, IntPtr pDepthStencilState, uint StencilRef);
        OMSetDepthStencilStateFunc m_OMSetDepthStencilStateFunc;

        public void SOSetTargets(uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets)
        {
            if(m_SOSetTargetsFunc==null){
                var fp = GetFunctionPointer(37);
                m_SOSetTargetsFunc = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            } 
             m_SOSetTargetsFunc(m_ptr, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets);
        SOSetTargetsFunc m_SOSetTargetsFunc;

        public void DrawAuto()
        {
            if(m_DrawAutoFunc==null){
                var fp = GetFunctionPointer(38);
                m_DrawAutoFunc = (DrawAutoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawAutoFunc));
            } 
             m_DrawAutoFunc(m_ptr);
        }
        delegate void DrawAutoFunc(IntPtr self);
        DrawAutoFunc m_DrawAutoFunc;

        public void DrawIndexedInstancedIndirect(IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs)
        {
            if(m_DrawIndexedInstancedIndirectFunc==null){
                var fp = GetFunctionPointer(39);
                m_DrawIndexedInstancedIndirectFunc = (DrawIndexedInstancedIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedIndirectFunc));
            } 
             m_DrawIndexedInstancedIndirectFunc(m_ptr, pBufferForArgs, AlignedByteOffsetForArgs);
        }
        delegate void DrawIndexedInstancedIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);
        DrawIndexedInstancedIndirectFunc m_DrawIndexedInstancedIndirectFunc;

        public void DrawInstancedIndirect(IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs)
        {
            if(m_DrawInstancedIndirectFunc==null){
                var fp = GetFunctionPointer(40);
                m_DrawInstancedIndirectFunc = (DrawInstancedIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedIndirectFunc));
            } 
             m_DrawInstancedIndirectFunc(m_ptr, pBufferForArgs, AlignedByteOffsetForArgs);
        }
        delegate void DrawInstancedIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);
        DrawInstancedIndirectFunc m_DrawInstancedIndirectFunc;

        public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
        {
            if(m_DispatchFunc==null){
                var fp = GetFunctionPointer(41);
                m_DispatchFunc = (DispatchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchFunc));
            } 
             m_DispatchFunc(m_ptr, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        }
        delegate void DispatchFunc(IntPtr self, uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
        DispatchFunc m_DispatchFunc;

        public void DispatchIndirect(IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs)
        {
            if(m_DispatchIndirectFunc==null){
                var fp = GetFunctionPointer(42);
                m_DispatchIndirectFunc = (DispatchIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchIndirectFunc));
            } 
             m_DispatchIndirectFunc(m_ptr, pBufferForArgs, AlignedByteOffsetForArgs);
        }
        delegate void DispatchIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);
        DispatchIndirectFunc m_DispatchIndirectFunc;

        public void RSSetState(IntPtr pRasterizerState)
        {
            if(m_RSSetStateFunc==null){
                var fp = GetFunctionPointer(43);
                m_RSSetStateFunc = (RSSetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetStateFunc));
            } 
             m_RSSetStateFunc(m_ptr, pRasterizerState);
        }
        delegate void RSSetStateFunc(IntPtr self, IntPtr pRasterizerState);
        RSSetStateFunc m_RSSetStateFunc;

        public void RSSetViewports(uint NumViewports, ref D3D11_VIEWPORT pViewports)
        {
            if(m_RSSetViewportsFunc==null){
                var fp = GetFunctionPointer(44);
                m_RSSetViewportsFunc = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            } 
             m_RSSetViewportsFunc(m_ptr, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D11_VIEWPORT pViewports);
        RSSetViewportsFunc m_RSSetViewportsFunc;

        public void RSSetScissorRects(uint NumRects, IntPtr pRects)
        {
            if(m_RSSetScissorRectsFunc==null){
                var fp = GetFunctionPointer(45);
                m_RSSetScissorRectsFunc = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            } 
             m_RSSetScissorRectsFunc(m_ptr, NumRects, pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, IntPtr pRects);
        RSSetScissorRectsFunc m_RSSetScissorRectsFunc;

        public void CopySubresourceRegion(IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D11_BOX pSrcBox)
        {
            if(m_CopySubresourceRegionFunc==null){
                var fp = GetFunctionPointer(46);
                m_CopySubresourceRegionFunc = (CopySubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopySubresourceRegionFunc));
            } 
             m_CopySubresourceRegionFunc(m_ptr, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, ref pSrcBox);
        }
        delegate void CopySubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D11_BOX pSrcBox);
        CopySubresourceRegionFunc m_CopySubresourceRegionFunc;

        public void CopyResource(IntPtr pDstResource, IntPtr pSrcResource)
        {
            if(m_CopyResourceFunc==null){
                var fp = GetFunctionPointer(47);
                m_CopyResourceFunc = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            } 
             m_CopyResourceFunc(m_ptr, pDstResource, pSrcResource);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);
        CopyResourceFunc m_CopyResourceFunc;

        public void UpdateSubresource(IntPtr pDstResource, uint DstSubresource, ref D3D11_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
        {
            if(m_UpdateSubresourceFunc==null){
                var fp = GetFunctionPointer(48);
                m_UpdateSubresourceFunc = (UpdateSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateSubresourceFunc));
            } 
             m_UpdateSubresourceFunc(m_ptr, pDstResource, DstSubresource, ref pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }
        delegate void UpdateSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, ref D3D11_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
        UpdateSubresourceFunc m_UpdateSubresourceFunc;

        public void CopyStructureCount(IntPtr pDstBuffer, uint DstAlignedByteOffset, IntPtr pSrcView)
        {
            if(m_CopyStructureCountFunc==null){
                var fp = GetFunctionPointer(49);
                m_CopyStructureCountFunc = (CopyStructureCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyStructureCountFunc));
            } 
             m_CopyStructureCountFunc(m_ptr, pDstBuffer, DstAlignedByteOffset, pSrcView);
        }
        delegate void CopyStructureCountFunc(IntPtr self, IntPtr pDstBuffer, uint DstAlignedByteOffset, IntPtr pSrcView);
        CopyStructureCountFunc m_CopyStructureCountFunc;

        public void ClearRenderTargetView(IntPtr pRenderTargetView, ref float ColorRGBA)
        {
            if(m_ClearRenderTargetViewFunc==null){
                var fp = GetFunctionPointer(50);
                m_ClearRenderTargetViewFunc = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            } 
             m_ClearRenderTargetViewFunc(m_ptr, pRenderTargetView, ref ColorRGBA);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, IntPtr pRenderTargetView, ref float ColorRGBA);
        ClearRenderTargetViewFunc m_ClearRenderTargetViewFunc;

        public void ClearUnorderedAccessViewUint(IntPtr pUnorderedAccessView, ref uint Values)
        {
            if(m_ClearUnorderedAccessViewUintFunc==null){
                var fp = GetFunctionPointer(51);
                m_ClearUnorderedAccessViewUintFunc = (ClearUnorderedAccessViewUintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewUintFunc));
            } 
             m_ClearUnorderedAccessViewUintFunc(m_ptr, pUnorderedAccessView, ref Values);
        }
        delegate void ClearUnorderedAccessViewUintFunc(IntPtr self, IntPtr pUnorderedAccessView, ref uint Values);
        ClearUnorderedAccessViewUintFunc m_ClearUnorderedAccessViewUintFunc;

        public void ClearUnorderedAccessViewFloat(IntPtr pUnorderedAccessView, ref float Values)
        {
            if(m_ClearUnorderedAccessViewFloatFunc==null){
                var fp = GetFunctionPointer(52);
                m_ClearUnorderedAccessViewFloatFunc = (ClearUnorderedAccessViewFloatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewFloatFunc));
            } 
             m_ClearUnorderedAccessViewFloatFunc(m_ptr, pUnorderedAccessView, ref Values);
        }
        delegate void ClearUnorderedAccessViewFloatFunc(IntPtr self, IntPtr pUnorderedAccessView, ref float Values);
        ClearUnorderedAccessViewFloatFunc m_ClearUnorderedAccessViewFloatFunc;

        public void ClearDepthStencilView(IntPtr pDepthStencilView, uint ClearFlags, float Depth, byte Stencil)
        {
            if(m_ClearDepthStencilViewFunc==null){
                var fp = GetFunctionPointer(53);
                m_ClearDepthStencilViewFunc = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            } 
             m_ClearDepthStencilViewFunc(m_ptr, pDepthStencilView, ClearFlags, Depth, Stencil);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, IntPtr pDepthStencilView, uint ClearFlags, float Depth, byte Stencil);
        ClearDepthStencilViewFunc m_ClearDepthStencilViewFunc;

        public void GenerateMips(IntPtr pShaderResourceView)
        {
            if(m_GenerateMipsFunc==null){
                var fp = GetFunctionPointer(54);
                m_GenerateMipsFunc = (GenerateMipsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateMipsFunc));
            } 
             m_GenerateMipsFunc(m_ptr, pShaderResourceView);
        }
        delegate void GenerateMipsFunc(IntPtr self, IntPtr pShaderResourceView);
        GenerateMipsFunc m_GenerateMipsFunc;

        public void SetResourceMinLOD(IntPtr pResource, float MinLOD)
        {
            if(m_SetResourceMinLODFunc==null){
                var fp = GetFunctionPointer(55);
                m_SetResourceMinLODFunc = (SetResourceMinLODFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResourceMinLODFunc));
            } 
             m_SetResourceMinLODFunc(m_ptr, pResource, MinLOD);
        }
        delegate void SetResourceMinLODFunc(IntPtr self, IntPtr pResource, float MinLOD);
        SetResourceMinLODFunc m_SetResourceMinLODFunc;

        public float GetResourceMinLOD(IntPtr pResource)
        {
            if(m_GetResourceMinLODFunc==null){
                var fp = GetFunctionPointer(56);
                m_GetResourceMinLODFunc = (GetResourceMinLODFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceMinLODFunc));
            } 
            return  m_GetResourceMinLODFunc(m_ptr, pResource);
        }
        delegate float GetResourceMinLODFunc(IntPtr self, IntPtr pResource);
        GetResourceMinLODFunc m_GetResourceMinLODFunc;

        public void ResolveSubresource(IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format)
        {
            if(m_ResolveSubresourceFunc==null){
                var fp = GetFunctionPointer(57);
                m_ResolveSubresourceFunc = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            } 
             m_ResolveSubresourceFunc(m_ptr, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
        ResolveSubresourceFunc m_ResolveSubresourceFunc;

        public void ExecuteCommandList(IntPtr pCommandList, int RestoreContextState)
        {
            if(m_ExecuteCommandListFunc==null){
                var fp = GetFunctionPointer(58);
                m_ExecuteCommandListFunc = (ExecuteCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ExecuteCommandListFunc));
            } 
             m_ExecuteCommandListFunc(m_ptr, pCommandList, RestoreContextState);
        }
        delegate void ExecuteCommandListFunc(IntPtr self, IntPtr pCommandList, int RestoreContextState);
        ExecuteCommandListFunc m_ExecuteCommandListFunc;

        public void HSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_HSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(59);
                m_HSSetShaderResourcesFunc = (HSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetShaderResourcesFunc));
            } 
             m_HSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void HSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        HSSetShaderResourcesFunc m_HSSetShaderResourcesFunc;

        public void HSSetShader(IntPtr pHullShader, ref IntPtr ppClassInstances, uint NumClassInstances)
        {
            if(m_HSSetShaderFunc==null){
                var fp = GetFunctionPointer(60);
                m_HSSetShaderFunc = (HSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetShaderFunc));
            } 
             m_HSSetShaderFunc(m_ptr, pHullShader, ref ppClassInstances, NumClassInstances);
        }
        delegate void HSSetShaderFunc(IntPtr self, IntPtr pHullShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        HSSetShaderFunc m_HSSetShaderFunc;

        public void HSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_HSSetSamplersFunc==null){
                var fp = GetFunctionPointer(61);
                m_HSSetSamplersFunc = (HSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetSamplersFunc));
            } 
             m_HSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void HSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        HSSetSamplersFunc m_HSSetSamplersFunc;

        public void HSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_HSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(62);
                m_HSSetConstantBuffersFunc = (HSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetConstantBuffersFunc));
            } 
             m_HSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void HSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        HSSetConstantBuffersFunc m_HSSetConstantBuffersFunc;

        public void DSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_DSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(63);
                m_DSSetShaderResourcesFunc = (DSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetShaderResourcesFunc));
            } 
             m_DSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void DSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        DSSetShaderResourcesFunc m_DSSetShaderResourcesFunc;

        public void DSSetShader(IntPtr pDomainShader, ref IntPtr ppClassInstances, uint NumClassInstances)
        {
            if(m_DSSetShaderFunc==null){
                var fp = GetFunctionPointer(64);
                m_DSSetShaderFunc = (DSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetShaderFunc));
            } 
             m_DSSetShaderFunc(m_ptr, pDomainShader, ref ppClassInstances, NumClassInstances);
        }
        delegate void DSSetShaderFunc(IntPtr self, IntPtr pDomainShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        DSSetShaderFunc m_DSSetShaderFunc;

        public void DSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_DSSetSamplersFunc==null){
                var fp = GetFunctionPointer(65);
                m_DSSetSamplersFunc = (DSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetSamplersFunc));
            } 
             m_DSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void DSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        DSSetSamplersFunc m_DSSetSamplersFunc;

        public void DSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_DSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(66);
                m_DSSetConstantBuffersFunc = (DSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetConstantBuffersFunc));
            } 
             m_DSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void DSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        DSSetConstantBuffersFunc m_DSSetConstantBuffersFunc;

        public void CSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_CSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(67);
                m_CSSetShaderResourcesFunc = (CSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetShaderResourcesFunc));
            } 
             m_CSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void CSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        CSSetShaderResourcesFunc m_CSSetShaderResourcesFunc;

        public void CSSetUnorderedAccessViews(uint StartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews, ref uint pUAVInitialCounts)
        {
            if(m_CSSetUnorderedAccessViewsFunc==null){
                var fp = GetFunctionPointer(68);
                m_CSSetUnorderedAccessViewsFunc = (CSSetUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetUnorderedAccessViewsFunc));
            } 
             m_CSSetUnorderedAccessViewsFunc(m_ptr, StartSlot, NumUAVs, ref ppUnorderedAccessViews, ref pUAVInitialCounts);
        }
        delegate void CSSetUnorderedAccessViewsFunc(IntPtr self, uint StartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews, ref uint pUAVInitialCounts);
        CSSetUnorderedAccessViewsFunc m_CSSetUnorderedAccessViewsFunc;

        public void CSSetShader(IntPtr pComputeShader, ref IntPtr ppClassInstances, uint NumClassInstances)
        {
            if(m_CSSetShaderFunc==null){
                var fp = GetFunctionPointer(69);
                m_CSSetShaderFunc = (CSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetShaderFunc));
            } 
             m_CSSetShaderFunc(m_ptr, pComputeShader, ref ppClassInstances, NumClassInstances);
        }
        delegate void CSSetShaderFunc(IntPtr self, IntPtr pComputeShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        CSSetShaderFunc m_CSSetShaderFunc;

        public void CSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_CSSetSamplersFunc==null){
                var fp = GetFunctionPointer(70);
                m_CSSetSamplersFunc = (CSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetSamplersFunc));
            } 
             m_CSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void CSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        CSSetSamplersFunc m_CSSetSamplersFunc;

        public void CSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_CSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(71);
                m_CSSetConstantBuffersFunc = (CSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetConstantBuffersFunc));
            } 
             m_CSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void CSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        CSSetConstantBuffersFunc m_CSSetConstantBuffersFunc;

        public void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_VSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(72);
                m_VSGetConstantBuffersFunc = (VSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetConstantBuffersFunc));
            } 
             m_VSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        VSGetConstantBuffersFunc m_VSGetConstantBuffersFunc;

        public void PSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_PSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(73);
                m_PSGetShaderResourcesFunc = (PSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderResourcesFunc));
            } 
             m_PSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        PSGetShaderResourcesFunc m_PSGetShaderResourcesFunc;

        public void PSGetShader(ref IntPtr ppPixelShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances)
        {
            if(m_PSGetShaderFunc==null){
                var fp = GetFunctionPointer(74);
                m_PSGetShaderFunc = (PSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderFunc));
            } 
             m_PSGetShaderFunc(m_ptr, ref ppPixelShader, ref ppClassInstances, ref pNumClassInstances);
        }
        delegate void PSGetShaderFunc(IntPtr self, ref IntPtr ppPixelShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);
        PSGetShaderFunc m_PSGetShaderFunc;

        public void PSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_PSGetSamplersFunc==null){
                var fp = GetFunctionPointer(75);
                m_PSGetSamplersFunc = (PSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetSamplersFunc));
            } 
             m_PSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        PSGetSamplersFunc m_PSGetSamplersFunc;

        public void VSGetShader(ref IntPtr ppVertexShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances)
        {
            if(m_VSGetShaderFunc==null){
                var fp = GetFunctionPointer(76);
                m_VSGetShaderFunc = (VSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderFunc));
            } 
             m_VSGetShaderFunc(m_ptr, ref ppVertexShader, ref ppClassInstances, ref pNumClassInstances);
        }
        delegate void VSGetShaderFunc(IntPtr self, ref IntPtr ppVertexShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);
        VSGetShaderFunc m_VSGetShaderFunc;

        public void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_PSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(77);
                m_PSGetConstantBuffersFunc = (PSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetConstantBuffersFunc));
            } 
             m_PSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        PSGetConstantBuffersFunc m_PSGetConstantBuffersFunc;

        public void IAGetInputLayout(ref IntPtr ppInputLayout)
        {
            if(m_IAGetInputLayoutFunc==null){
                var fp = GetFunctionPointer(78);
                m_IAGetInputLayoutFunc = (IAGetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetInputLayoutFunc));
            } 
             m_IAGetInputLayoutFunc(m_ptr, ref ppInputLayout);
        }
        delegate void IAGetInputLayoutFunc(IntPtr self, ref IntPtr ppInputLayout);
        IAGetInputLayoutFunc m_IAGetInputLayoutFunc;

        public void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
        {
            if(m_IAGetVertexBuffersFunc==null){
                var fp = GetFunctionPointer(79);
                m_IAGetVertexBuffersFunc = (IAGetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetVertexBuffersFunc));
            } 
             m_IAGetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IAGetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);
        IAGetVertexBuffersFunc m_IAGetVertexBuffersFunc;

        public void IAGetIndexBuffer(ref IntPtr pIndexBuffer, ref DXGI_FORMAT Format, ref uint Offset)
        {
            if(m_IAGetIndexBufferFunc==null){
                var fp = GetFunctionPointer(80);
                m_IAGetIndexBufferFunc = (IAGetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetIndexBufferFunc));
            } 
             m_IAGetIndexBufferFunc(m_ptr, ref pIndexBuffer, ref Format, ref Offset);
        }
        delegate void IAGetIndexBufferFunc(IntPtr self, ref IntPtr pIndexBuffer, ref DXGI_FORMAT Format, ref uint Offset);
        IAGetIndexBufferFunc m_IAGetIndexBufferFunc;

        public void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_GSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(81);
                m_GSGetConstantBuffersFunc = (GSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetConstantBuffersFunc));
            } 
             m_GSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        GSGetConstantBuffersFunc m_GSGetConstantBuffersFunc;

        public void GSGetShader(ref IntPtr ppGeometryShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances)
        {
            if(m_GSGetShaderFunc==null){
                var fp = GetFunctionPointer(82);
                m_GSGetShaderFunc = (GSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderFunc));
            } 
             m_GSGetShaderFunc(m_ptr, ref ppGeometryShader, ref ppClassInstances, ref pNumClassInstances);
        }
        delegate void GSGetShaderFunc(IntPtr self, ref IntPtr ppGeometryShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);
        GSGetShaderFunc m_GSGetShaderFunc;

        public void IAGetPrimitiveTopology(IntPtr pTopology)
        {
            if(m_IAGetPrimitiveTopologyFunc==null){
                var fp = GetFunctionPointer(83);
                m_IAGetPrimitiveTopologyFunc = (IAGetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetPrimitiveTopologyFunc));
            } 
             m_IAGetPrimitiveTopologyFunc(m_ptr, pTopology);
        }
        delegate void IAGetPrimitiveTopologyFunc(IntPtr self, IntPtr pTopology);
        IAGetPrimitiveTopologyFunc m_IAGetPrimitiveTopologyFunc;

        public void VSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_VSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(84);
                m_VSGetShaderResourcesFunc = (VSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderResourcesFunc));
            } 
             m_VSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        VSGetShaderResourcesFunc m_VSGetShaderResourcesFunc;

        public void VSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_VSGetSamplersFunc==null){
                var fp = GetFunctionPointer(85);
                m_VSGetSamplersFunc = (VSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetSamplersFunc));
            } 
             m_VSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        VSGetSamplersFunc m_VSGetSamplersFunc;

        public void GetPredication(ref IntPtr ppPredicate, ref int pPredicateValue)
        {
            if(m_GetPredicationFunc==null){
                var fp = GetFunctionPointer(86);
                m_GetPredicationFunc = (GetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPredicationFunc));
            } 
             m_GetPredicationFunc(m_ptr, ref ppPredicate, ref pPredicateValue);
        }
        delegate void GetPredicationFunc(IntPtr self, ref IntPtr ppPredicate, ref int pPredicateValue);
        GetPredicationFunc m_GetPredicationFunc;

        public void GSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_GSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(87);
                m_GSGetShaderResourcesFunc = (GSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderResourcesFunc));
            } 
             m_GSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        GSGetShaderResourcesFunc m_GSGetShaderResourcesFunc;

        public void GSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_GSGetSamplersFunc==null){
                var fp = GetFunctionPointer(88);
                m_GSGetSamplersFunc = (GSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetSamplersFunc));
            } 
             m_GSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        GSGetSamplersFunc m_GSGetSamplersFunc;

        public void OMGetRenderTargets(uint NumViews, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView)
        {
            if(m_OMGetRenderTargetsFunc==null){
                var fp = GetFunctionPointer(89);
                m_OMGetRenderTargetsFunc = (OMGetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsFunc));
            } 
             m_OMGetRenderTargetsFunc(m_ptr, NumViews, ref ppRenderTargetViews, ref ppDepthStencilView);
        }
        delegate void OMGetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView);
        OMGetRenderTargetsFunc m_OMGetRenderTargetsFunc;

        public void OMGetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews)
        {
            if(m_OMGetRenderTargetsAndUnorderedAccessViewsFunc==null){
                var fp = GetFunctionPointer(90);
                m_OMGetRenderTargetsAndUnorderedAccessViewsFunc = (OMGetRenderTargetsAndUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsAndUnorderedAccessViewsFunc));
            } 
             m_OMGetRenderTargetsAndUnorderedAccessViewsFunc(m_ptr, NumRTVs, ref ppRenderTargetViews, ref ppDepthStencilView, UAVStartSlot, NumUAVs, ref ppUnorderedAccessViews);
        }
        delegate void OMGetRenderTargetsAndUnorderedAccessViewsFunc(IntPtr self, uint NumRTVs, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews);
        OMGetRenderTargetsAndUnorderedAccessViewsFunc m_OMGetRenderTargetsAndUnorderedAccessViewsFunc;

        public void OMGetBlendState(ref IntPtr ppBlendState, ref float BlendFactor, ref uint pSampleMask)
        {
            if(m_OMGetBlendStateFunc==null){
                var fp = GetFunctionPointer(91);
                m_OMGetBlendStateFunc = (OMGetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetBlendStateFunc));
            } 
             m_OMGetBlendStateFunc(m_ptr, ref ppBlendState, ref BlendFactor, ref pSampleMask);
        }
        delegate void OMGetBlendStateFunc(IntPtr self, ref IntPtr ppBlendState, ref float BlendFactor, ref uint pSampleMask);
        OMGetBlendStateFunc m_OMGetBlendStateFunc;

        public void OMGetDepthStencilState(ref IntPtr ppDepthStencilState, ref uint pStencilRef)
        {
            if(m_OMGetDepthStencilStateFunc==null){
                var fp = GetFunctionPointer(92);
                m_OMGetDepthStencilStateFunc = (OMGetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetDepthStencilStateFunc));
            } 
             m_OMGetDepthStencilStateFunc(m_ptr, ref ppDepthStencilState, ref pStencilRef);
        }
        delegate void OMGetDepthStencilStateFunc(IntPtr self, ref IntPtr ppDepthStencilState, ref uint pStencilRef);
        OMGetDepthStencilStateFunc m_OMGetDepthStencilStateFunc;

        public void SOGetTargets(uint NumBuffers, ref IntPtr ppSOTargets)
        {
            if(m_SOGetTargetsFunc==null){
                var fp = GetFunctionPointer(93);
                m_SOGetTargetsFunc = (SOGetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOGetTargetsFunc));
            } 
             m_SOGetTargetsFunc(m_ptr, NumBuffers, ref ppSOTargets);
        }
        delegate void SOGetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets);
        SOGetTargetsFunc m_SOGetTargetsFunc;

        public void RSGetState(ref IntPtr ppRasterizerState)
        {
            if(m_RSGetStateFunc==null){
                var fp = GetFunctionPointer(94);
                m_RSGetStateFunc = (RSGetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetStateFunc));
            } 
             m_RSGetStateFunc(m_ptr, ref ppRasterizerState);
        }
        delegate void RSGetStateFunc(IntPtr self, ref IntPtr ppRasterizerState);
        RSGetStateFunc m_RSGetStateFunc;

        public void RSGetViewports(ref uint pNumViewports, ref D3D11_VIEWPORT pViewports)
        {
            if(m_RSGetViewportsFunc==null){
                var fp = GetFunctionPointer(95);
                m_RSGetViewportsFunc = (RSGetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetViewportsFunc));
            } 
             m_RSGetViewportsFunc(m_ptr, ref pNumViewports, ref pViewports);
        }
        delegate void RSGetViewportsFunc(IntPtr self, ref uint pNumViewports, ref D3D11_VIEWPORT pViewports);
        RSGetViewportsFunc m_RSGetViewportsFunc;

        public void RSGetScissorRects(ref uint pNumRects, IntPtr pRects)
        {
            if(m_RSGetScissorRectsFunc==null){
                var fp = GetFunctionPointer(96);
                m_RSGetScissorRectsFunc = (RSGetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetScissorRectsFunc));
            } 
             m_RSGetScissorRectsFunc(m_ptr, ref pNumRects, pRects);
        }
        delegate void RSGetScissorRectsFunc(IntPtr self, ref uint pNumRects, IntPtr pRects);
        RSGetScissorRectsFunc m_RSGetScissorRectsFunc;

        public void HSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_HSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(97);
                m_HSGetShaderResourcesFunc = (HSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetShaderResourcesFunc));
            } 
             m_HSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void HSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        HSGetShaderResourcesFunc m_HSGetShaderResourcesFunc;

        public void HSGetShader(ref IntPtr ppHullShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances)
        {
            if(m_HSGetShaderFunc==null){
                var fp = GetFunctionPointer(98);
                m_HSGetShaderFunc = (HSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetShaderFunc));
            } 
             m_HSGetShaderFunc(m_ptr, ref ppHullShader, ref ppClassInstances, ref pNumClassInstances);
        }
        delegate void HSGetShaderFunc(IntPtr self, ref IntPtr ppHullShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);
        HSGetShaderFunc m_HSGetShaderFunc;

        public void HSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_HSGetSamplersFunc==null){
                var fp = GetFunctionPointer(99);
                m_HSGetSamplersFunc = (HSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetSamplersFunc));
            } 
             m_HSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void HSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        HSGetSamplersFunc m_HSGetSamplersFunc;

        public void HSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_HSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(100);
                m_HSGetConstantBuffersFunc = (HSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetConstantBuffersFunc));
            } 
             m_HSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void HSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        HSGetConstantBuffersFunc m_HSGetConstantBuffersFunc;

        public void DSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_DSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(101);
                m_DSGetShaderResourcesFunc = (DSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetShaderResourcesFunc));
            } 
             m_DSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void DSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        DSGetShaderResourcesFunc m_DSGetShaderResourcesFunc;

        public void DSGetShader(ref IntPtr ppDomainShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances)
        {
            if(m_DSGetShaderFunc==null){
                var fp = GetFunctionPointer(102);
                m_DSGetShaderFunc = (DSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetShaderFunc));
            } 
             m_DSGetShaderFunc(m_ptr, ref ppDomainShader, ref ppClassInstances, ref pNumClassInstances);
        }
        delegate void DSGetShaderFunc(IntPtr self, ref IntPtr ppDomainShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);
        DSGetShaderFunc m_DSGetShaderFunc;

        public void DSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_DSGetSamplersFunc==null){
                var fp = GetFunctionPointer(103);
                m_DSGetSamplersFunc = (DSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetSamplersFunc));
            } 
             m_DSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void DSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        DSGetSamplersFunc m_DSGetSamplersFunc;

        public void DSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_DSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(104);
                m_DSGetConstantBuffersFunc = (DSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetConstantBuffersFunc));
            } 
             m_DSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void DSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        DSGetConstantBuffersFunc m_DSGetConstantBuffersFunc;

        public void CSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_CSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(105);
                m_CSGetShaderResourcesFunc = (CSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetShaderResourcesFunc));
            } 
             m_CSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void CSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        CSGetShaderResourcesFunc m_CSGetShaderResourcesFunc;

        public void CSGetUnorderedAccessViews(uint StartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews)
        {
            if(m_CSGetUnorderedAccessViewsFunc==null){
                var fp = GetFunctionPointer(106);
                m_CSGetUnorderedAccessViewsFunc = (CSGetUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetUnorderedAccessViewsFunc));
            } 
             m_CSGetUnorderedAccessViewsFunc(m_ptr, StartSlot, NumUAVs, ref ppUnorderedAccessViews);
        }
        delegate void CSGetUnorderedAccessViewsFunc(IntPtr self, uint StartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews);
        CSGetUnorderedAccessViewsFunc m_CSGetUnorderedAccessViewsFunc;

        public void CSGetShader(ref IntPtr ppComputeShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances)
        {
            if(m_CSGetShaderFunc==null){
                var fp = GetFunctionPointer(107);
                m_CSGetShaderFunc = (CSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetShaderFunc));
            } 
             m_CSGetShaderFunc(m_ptr, ref ppComputeShader, ref ppClassInstances, ref pNumClassInstances);
        }
        delegate void CSGetShaderFunc(IntPtr self, ref IntPtr ppComputeShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);
        CSGetShaderFunc m_CSGetShaderFunc;

        public void CSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_CSGetSamplersFunc==null){
                var fp = GetFunctionPointer(108);
                m_CSGetSamplersFunc = (CSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetSamplersFunc));
            } 
             m_CSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void CSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        CSGetSamplersFunc m_CSGetSamplersFunc;

        public void CSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_CSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(109);
                m_CSGetConstantBuffersFunc = (CSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetConstantBuffersFunc));
            } 
             m_CSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void CSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        CSGetConstantBuffersFunc m_CSGetConstantBuffersFunc;

        public void ClearState()
        {
            if(m_ClearStateFunc==null){
                var fp = GetFunctionPointer(110);
                m_ClearStateFunc = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            } 
             m_ClearStateFunc(m_ptr);
        }
        delegate void ClearStateFunc(IntPtr self);
        ClearStateFunc m_ClearStateFunc;

        public void Flush()
        {
            if(m_FlushFunc==null){
                var fp = GetFunctionPointer(111);
                m_FlushFunc = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            } 
             m_FlushFunc(m_ptr);
        }
        delegate void FlushFunc(IntPtr self);
        FlushFunc m_FlushFunc;

        public D3D11_DEVICE_CONTEXT_TYPE GetType()
        {
            if(m_GetTypeFunc==null){
                var fp = GetFunctionPointer(112);
                m_GetTypeFunc = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            } 
            return  m_GetTypeFunc(m_ptr);
        }
        delegate D3D11_DEVICE_CONTEXT_TYPE GetTypeFunc(IntPtr self);
        GetTypeFunc m_GetTypeFunc;

        public uint GetContextFlags()
        {
            if(m_GetContextFlagsFunc==null){
                var fp = GetFunctionPointer(113);
                m_GetContextFlagsFunc = (GetContextFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContextFlagsFunc));
            } 
            return  m_GetContextFlagsFunc(m_ptr);
        }
        delegate uint GetContextFlagsFunc(IntPtr self);
        GetContextFlagsFunc m_GetContextFlagsFunc;

        public int FinishCommandList(int RestoreDeferredContextState, ref IntPtr ppCommandList)
        {
            if(m_FinishCommandListFunc==null){
                var fp = GetFunctionPointer(114);
                m_FinishCommandListFunc = (FinishCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FinishCommandListFunc));
            } 
            return  m_FinishCommandListFunc(m_ptr, RestoreDeferredContextState, ref ppCommandList);
        }
        delegate int FinishCommandListFunc(IntPtr self, int RestoreDeferredContextState, ref IntPtr ppCommandList);
        FinishCommandListFunc m_FinishCommandListFunc;

    }
}
