// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/objidlbase.h:2258
    public class IStream : ISequentialStream // 3
    {
        static Guid s_uuid = new Guid("0000000c-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int Seek(LARGE_INTEGER dlibMove, uint dwOrigin, ref ULARGE_INTEGER plibNewPosition)
        {
            if(m_SeekFunc==null){
                var fp = GetFunctionPointer(5);
                m_SeekFunc = (SeekFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SeekFunc));
            } 
            
            return  m_SeekFunc(m_ptr, dlibMove, dwOrigin, ref plibNewPosition);
        }
        delegate int SeekFunc(IntPtr self, LARGE_INTEGER dlibMove, uint dwOrigin, ref ULARGE_INTEGER plibNewPosition);
        SeekFunc m_SeekFunc;

        public int SetSize(ULARGE_INTEGER libNewSize)
        {
            if(m_SetSizeFunc==null){
                var fp = GetFunctionPointer(6);
                m_SetSizeFunc = (SetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSizeFunc));
            } 
            
            return  m_SetSizeFunc(m_ptr, libNewSize);
        }
        delegate int SetSizeFunc(IntPtr self, ULARGE_INTEGER libNewSize);
        SetSizeFunc m_SetSizeFunc;

        public int CopyTo(IntPtr pstm, ULARGE_INTEGER cb, ref ULARGE_INTEGER pcbRead, ref ULARGE_INTEGER pcbWritten)
        {
            if(m_CopyToFunc==null){
                var fp = GetFunctionPointer(7);
                m_CopyToFunc = (CopyToFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyToFunc));
            } 
            
            return  m_CopyToFunc(m_ptr, pstm, cb, ref pcbRead, ref pcbWritten);
        }
        delegate int CopyToFunc(IntPtr self, IntPtr pstm, ULARGE_INTEGER cb, ref ULARGE_INTEGER pcbRead, ref ULARGE_INTEGER pcbWritten);
        CopyToFunc m_CopyToFunc;

        public int Commit(uint grfCommitFlags)
        {
            if(m_CommitFunc==null){
                var fp = GetFunctionPointer(8);
                m_CommitFunc = (CommitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CommitFunc));
            } 
            
            return  m_CommitFunc(m_ptr, grfCommitFlags);
        }
        delegate int CommitFunc(IntPtr self, uint grfCommitFlags);
        CommitFunc m_CommitFunc;

        public int Revert()
        {
            if(m_RevertFunc==null){
                var fp = GetFunctionPointer(9);
                m_RevertFunc = (RevertFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RevertFunc));
            } 
            
            return  m_RevertFunc(m_ptr);
        }
        delegate int RevertFunc(IntPtr self);
        RevertFunc m_RevertFunc;

        public int LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, uint dwLockType)
        {
            if(m_LockRegionFunc==null){
                var fp = GetFunctionPointer(10);
                m_LockRegionFunc = (LockRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LockRegionFunc));
            } 
            
            return  m_LockRegionFunc(m_ptr, libOffset, cb, dwLockType);
        }
        delegate int LockRegionFunc(IntPtr self, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, uint dwLockType);
        LockRegionFunc m_LockRegionFunc;

        public int UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, uint dwLockType)
        {
            if(m_UnlockRegionFunc==null){
                var fp = GetFunctionPointer(11);
                m_UnlockRegionFunc = (UnlockRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnlockRegionFunc));
            } 
            
            return  m_UnlockRegionFunc(m_ptr, libOffset, cb, dwLockType);
        }
        delegate int UnlockRegionFunc(IntPtr self, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, uint dwLockType);
        UnlockRegionFunc m_UnlockRegionFunc;

        public int Stat(ref STATSTG pstatstg, uint grfStatFlag)
        {
            if(m_StatFunc==null){
                var fp = GetFunctionPointer(12);
                m_StatFunc = (StatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StatFunc));
            } 
            
            return  m_StatFunc(m_ptr, ref pstatstg, grfStatFlag);
        }
        delegate int StatFunc(IntPtr self, ref STATSTG pstatstg, uint grfStatFlag);
        StatFunc m_StatFunc;

        public int Clone(ref IntPtr ppstm)
        {
            if(m_CloneFunc==null){
                var fp = GetFunctionPointer(13);
                m_CloneFunc = (CloneFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloneFunc));
            } 
            
            return  m_CloneFunc(m_ptr, ref ppstm);
        }
        delegate int CloneFunc(IntPtr self, ref IntPtr ppstm);
        CloneFunc m_CloneFunc;

    }
}
