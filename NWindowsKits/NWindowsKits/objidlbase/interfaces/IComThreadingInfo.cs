// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/objidlbase.h:7218
    public class IComThreadingInfo : IUnknown
    {
        static Guid s_uuid = new Guid("000001ce-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetCurrentApartmentType(ref APTTYPE pAptType)
        {
            if(m_GetCurrentApartmentTypeFunc==null){
                var fp = GetFunctionPointer(3);
                m_GetCurrentApartmentTypeFunc = (GetCurrentApartmentTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentApartmentTypeFunc));
            } 
            return  m_GetCurrentApartmentTypeFunc(m_ptr, ref pAptType);
        }
        delegate int GetCurrentApartmentTypeFunc(IntPtr self, ref APTTYPE pAptType);
        GetCurrentApartmentTypeFunc m_GetCurrentApartmentTypeFunc;

        public int GetCurrentThreadType(ref THDTYPE pThreadType)
        {
            if(m_GetCurrentThreadTypeFunc==null){
                var fp = GetFunctionPointer(4);
                m_GetCurrentThreadTypeFunc = (GetCurrentThreadTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentThreadTypeFunc));
            } 
            return  m_GetCurrentThreadTypeFunc(m_ptr, ref pThreadType);
        }
        delegate int GetCurrentThreadTypeFunc(IntPtr self, ref THDTYPE pThreadType);
        GetCurrentThreadTypeFunc m_GetCurrentThreadTypeFunc;

        public int GetCurrentLogicalThreadId(ref GUID pguidLogicalThreadId)
        {
            if(m_GetCurrentLogicalThreadIdFunc==null){
                var fp = GetFunctionPointer(5);
                m_GetCurrentLogicalThreadIdFunc = (GetCurrentLogicalThreadIdFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentLogicalThreadIdFunc));
            } 
            return  m_GetCurrentLogicalThreadIdFunc(m_ptr, ref pguidLogicalThreadId);
        }
        delegate int GetCurrentLogicalThreadIdFunc(IntPtr self, ref GUID pguidLogicalThreadId);
        GetCurrentLogicalThreadIdFunc m_GetCurrentLogicalThreadIdFunc;

        public int SetCurrentLogicalThreadId(ref GUID rguid)
        {
            if(m_SetCurrentLogicalThreadIdFunc==null){
                var fp = GetFunctionPointer(6);
                m_SetCurrentLogicalThreadIdFunc = (SetCurrentLogicalThreadIdFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetCurrentLogicalThreadIdFunc));
            } 
            return  m_SetCurrentLogicalThreadIdFunc(m_ptr, ref rguid);
        }
        delegate int SetCurrentLogicalThreadIdFunc(IntPtr self, ref GUID rguid);
        SetCurrentLogicalThreadIdFunc m_SetCurrentLogicalThreadIdFunc;

    }
}
