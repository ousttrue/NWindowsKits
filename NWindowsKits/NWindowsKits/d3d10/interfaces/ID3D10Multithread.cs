// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/d3d10.h:6648
    public class ID3D10Multithread : IUnknown // 1
    {
        static Guid s_uuid = new Guid("9b7e4e00-342c-4106-a19f-4f2704f689f0");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public void Enter()
        {
            if(m_EnterFunc==null){
                var fp = GetFunctionPointer(3);
                m_EnterFunc = (EnterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnterFunc));
            } 
            
             m_EnterFunc(m_ptr);
        }
        delegate void EnterFunc(IntPtr self);
        EnterFunc m_EnterFunc;

        public void Leave()
        {
            if(m_LeaveFunc==null){
                var fp = GetFunctionPointer(4);
                m_LeaveFunc = (LeaveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LeaveFunc));
            } 
            
             m_LeaveFunc(m_ptr);
        }
        delegate void LeaveFunc(IntPtr self);
        LeaveFunc m_LeaveFunc;

        public int SetMultithreadProtected(int bMTProtect)
        {
            if(m_SetMultithreadProtectedFunc==null){
                var fp = GetFunctionPointer(5);
                m_SetMultithreadProtectedFunc = (SetMultithreadProtectedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMultithreadProtectedFunc));
            } 
            
            return  m_SetMultithreadProtectedFunc(m_ptr, bMTProtect);
        }
        delegate int SetMultithreadProtectedFunc(IntPtr self, int bMTProtect);
        SetMultithreadProtectedFunc m_SetMultithreadProtectedFunc;

        public int GetMultithreadProtected()
        {
            if(m_GetMultithreadProtectedFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetMultithreadProtectedFunc = (GetMultithreadProtectedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMultithreadProtectedFunc));
            } 
            
            return  m_GetMultithreadProtectedFunc(m_ptr);
        }
        delegate int GetMultithreadProtectedFunc(IntPtr self);
        GetMultithreadProtectedFunc m_GetMultithreadProtectedFunc;

    }
}
