// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/d3d10.h:4831
    public class ID3D10Device : IUnknown // 1
    {
        static Guid s_uuid = new Guid("9b7e4c0f-342c-4106-a19f-4f2704f689f0");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_VSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(3);
                m_VSSetConstantBuffersFunc = (VSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetConstantBuffersFunc));
            } 
             m_VSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        VSSetConstantBuffersFunc m_VSSetConstantBuffersFunc;

        public void PSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_PSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(4);
                m_PSSetShaderResourcesFunc = (PSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderResourcesFunc));
            } 
             m_PSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        PSSetShaderResourcesFunc m_PSSetShaderResourcesFunc;

        public void PSSetShader(IntPtr pPixelShader)
        {
            if(m_PSSetShaderFunc==null){
                var fp = GetFunctionPointer(5);
                m_PSSetShaderFunc = (PSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderFunc));
            } 
             m_PSSetShaderFunc(m_ptr, pPixelShader);
        }
        delegate void PSSetShaderFunc(IntPtr self, IntPtr pPixelShader);
        PSSetShaderFunc m_PSSetShaderFunc;

        public void PSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_PSSetSamplersFunc==null){
                var fp = GetFunctionPointer(6);
                m_PSSetSamplersFunc = (PSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetSamplersFunc));
            } 
             m_PSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        PSSetSamplersFunc m_PSSetSamplersFunc;

        public void VSSetShader(IntPtr pVertexShader)
        {
            if(m_VSSetShaderFunc==null){
                var fp = GetFunctionPointer(7);
                m_VSSetShaderFunc = (VSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderFunc));
            } 
             m_VSSetShaderFunc(m_ptr, pVertexShader);
        }
        delegate void VSSetShaderFunc(IntPtr self, IntPtr pVertexShader);
        VSSetShaderFunc m_VSSetShaderFunc;

        public void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
        {
            if(m_DrawIndexedFunc==null){
                var fp = GetFunctionPointer(8);
                m_DrawIndexedFunc = (DrawIndexedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedFunc));
            } 
             m_DrawIndexedFunc(m_ptr, IndexCount, StartIndexLocation, BaseVertexLocation);
        }
        delegate void DrawIndexedFunc(IntPtr self, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);
        DrawIndexedFunc m_DrawIndexedFunc;

        public void Draw(uint VertexCount, uint StartVertexLocation)
        {
            if(m_DrawFunc==null){
                var fp = GetFunctionPointer(9);
                m_DrawFunc = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            } 
             m_DrawFunc(m_ptr, VertexCount, StartVertexLocation);
        }
        delegate void DrawFunc(IntPtr self, uint VertexCount, uint StartVertexLocation);
        DrawFunc m_DrawFunc;

        public void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_PSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(10);
                m_PSSetConstantBuffersFunc = (PSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetConstantBuffersFunc));
            } 
             m_PSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        PSSetConstantBuffersFunc m_PSSetConstantBuffersFunc;

        public void IASetInputLayout(IntPtr pInputLayout)
        {
            if(m_IASetInputLayoutFunc==null){
                var fp = GetFunctionPointer(11);
                m_IASetInputLayoutFunc = (IASetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetInputLayoutFunc));
            } 
             m_IASetInputLayoutFunc(m_ptr, pInputLayout);
        }
        delegate void IASetInputLayoutFunc(IntPtr self, IntPtr pInputLayout);
        IASetInputLayoutFunc m_IASetInputLayoutFunc;

        public void IASetVertexBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
        {
            if(m_IASetVertexBuffersFunc==null){
                var fp = GetFunctionPointer(12);
                m_IASetVertexBuffersFunc = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            } 
             m_IASetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);
        IASetVertexBuffersFunc m_IASetVertexBuffersFunc;

        public void IASetIndexBuffer(IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset)
        {
            if(m_IASetIndexBufferFunc==null){
                var fp = GetFunctionPointer(13);
                m_IASetIndexBufferFunc = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            } 
             m_IASetIndexBufferFunc(m_ptr, pIndexBuffer, Format, Offset);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset);
        IASetIndexBufferFunc m_IASetIndexBufferFunc;

        public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
        {
            if(m_DrawIndexedInstancedFunc==null){
                var fp = GetFunctionPointer(14);
                m_DrawIndexedInstancedFunc = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            } 
             m_DrawIndexedInstancedFunc(m_ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
        DrawIndexedInstancedFunc m_DrawIndexedInstancedFunc;

        public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
        {
            if(m_DrawInstancedFunc==null){
                var fp = GetFunctionPointer(15);
                m_DrawInstancedFunc = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            } 
             m_DrawInstancedFunc(m_ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
        DrawInstancedFunc m_DrawInstancedFunc;

        public void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_GSSetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(16);
                m_GSSetConstantBuffersFunc = (GSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetConstantBuffersFunc));
            } 
             m_GSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        GSSetConstantBuffersFunc m_GSSetConstantBuffersFunc;

        public void GSSetShader(IntPtr pShader)
        {
            if(m_GSSetShaderFunc==null){
                var fp = GetFunctionPointer(17);
                m_GSSetShaderFunc = (GSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderFunc));
            } 
             m_GSSetShaderFunc(m_ptr, pShader);
        }
        delegate void GSSetShaderFunc(IntPtr self, IntPtr pShader);
        GSSetShaderFunc m_GSSetShaderFunc;

        public void IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY Topology)
        {
            if(m_IASetPrimitiveTopologyFunc==null){
                var fp = GetFunctionPointer(18);
                m_IASetPrimitiveTopologyFunc = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            } 
             m_IASetPrimitiveTopologyFunc(m_ptr, Topology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D_PRIMITIVE_TOPOLOGY Topology);
        IASetPrimitiveTopologyFunc m_IASetPrimitiveTopologyFunc;

        public void VSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_VSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(19);
                m_VSSetShaderResourcesFunc = (VSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderResourcesFunc));
            } 
             m_VSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        VSSetShaderResourcesFunc m_VSSetShaderResourcesFunc;

        public void VSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_VSSetSamplersFunc==null){
                var fp = GetFunctionPointer(20);
                m_VSSetSamplersFunc = (VSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetSamplersFunc));
            } 
             m_VSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        VSSetSamplersFunc m_VSSetSamplersFunc;

        public void SetPredication(IntPtr pPredicate, int PredicateValue)
        {
            if(m_SetPredicationFunc==null){
                var fp = GetFunctionPointer(21);
                m_SetPredicationFunc = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            } 
             m_SetPredicationFunc(m_ptr, pPredicate, PredicateValue);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pPredicate, int PredicateValue);
        SetPredicationFunc m_SetPredicationFunc;

        public void GSSetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_GSSetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(22);
                m_GSSetShaderResourcesFunc = (GSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderResourcesFunc));
            } 
             m_GSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        GSSetShaderResourcesFunc m_GSSetShaderResourcesFunc;

        public void GSSetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_GSSetSamplersFunc==null){
                var fp = GetFunctionPointer(23);
                m_GSSetSamplersFunc = (GSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetSamplersFunc));
            } 
             m_GSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        GSSetSamplersFunc m_GSSetSamplersFunc;

        public void OMSetRenderTargets(uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView)
        {
            if(m_OMSetRenderTargetsFunc==null){
                var fp = GetFunctionPointer(24);
                m_OMSetRenderTargetsFunc = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            } 
             m_OMSetRenderTargetsFunc(m_ptr, NumViews, ref ppRenderTargetViews, pDepthStencilView);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView);
        OMSetRenderTargetsFunc m_OMSetRenderTargetsFunc;

        public void OMSetBlendState(IntPtr pBlendState, ref float BlendFactor, uint SampleMask)
        {
            if(m_OMSetBlendStateFunc==null){
                var fp = GetFunctionPointer(25);
                m_OMSetBlendStateFunc = (OMSetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendStateFunc));
            } 
             m_OMSetBlendStateFunc(m_ptr, pBlendState, ref BlendFactor, SampleMask);
        }
        delegate void OMSetBlendStateFunc(IntPtr self, IntPtr pBlendState, ref float BlendFactor, uint SampleMask);
        OMSetBlendStateFunc m_OMSetBlendStateFunc;

        public void OMSetDepthStencilState(IntPtr pDepthStencilState, uint StencilRef)
        {
            if(m_OMSetDepthStencilStateFunc==null){
                var fp = GetFunctionPointer(26);
                m_OMSetDepthStencilStateFunc = (OMSetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthStencilStateFunc));
            } 
             m_OMSetDepthStencilStateFunc(m_ptr, pDepthStencilState, StencilRef);
        }
        delegate void OMSetDepthStencilStateFunc(IntPtr self, IntPtr pDepthStencilState, uint StencilRef);
        OMSetDepthStencilStateFunc m_OMSetDepthStencilStateFunc;

        public void SOSetTargets(uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets)
        {
            if(m_SOSetTargetsFunc==null){
                var fp = GetFunctionPointer(27);
                m_SOSetTargetsFunc = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            } 
             m_SOSetTargetsFunc(m_ptr, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets);
        SOSetTargetsFunc m_SOSetTargetsFunc;

        public void DrawAuto()
        {
            if(m_DrawAutoFunc==null){
                var fp = GetFunctionPointer(28);
                m_DrawAutoFunc = (DrawAutoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawAutoFunc));
            } 
             m_DrawAutoFunc(m_ptr);
        }
        delegate void DrawAutoFunc(IntPtr self);
        DrawAutoFunc m_DrawAutoFunc;

        public void RSSetState(IntPtr pRasterizerState)
        {
            if(m_RSSetStateFunc==null){
                var fp = GetFunctionPointer(29);
                m_RSSetStateFunc = (RSSetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetStateFunc));
            } 
             m_RSSetStateFunc(m_ptr, pRasterizerState);
        }
        delegate void RSSetStateFunc(IntPtr self, IntPtr pRasterizerState);
        RSSetStateFunc m_RSSetStateFunc;

        public void RSSetViewports(uint NumViewports, ref D3D10_VIEWPORT pViewports)
        {
            if(m_RSSetViewportsFunc==null){
                var fp = GetFunctionPointer(30);
                m_RSSetViewportsFunc = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            } 
             m_RSSetViewportsFunc(m_ptr, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D10_VIEWPORT pViewports);
        RSSetViewportsFunc m_RSSetViewportsFunc;

        public void RSSetScissorRects(uint NumRects, IntPtr pRects)
        {
            if(m_RSSetScissorRectsFunc==null){
                var fp = GetFunctionPointer(31);
                m_RSSetScissorRectsFunc = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            } 
             m_RSSetScissorRectsFunc(m_ptr, NumRects, pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, IntPtr pRects);
        RSSetScissorRectsFunc m_RSSetScissorRectsFunc;

        public void CopySubresourceRegion(IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D10_BOX pSrcBox)
        {
            if(m_CopySubresourceRegionFunc==null){
                var fp = GetFunctionPointer(32);
                m_CopySubresourceRegionFunc = (CopySubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopySubresourceRegionFunc));
            } 
             m_CopySubresourceRegionFunc(m_ptr, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, ref pSrcBox);
        }
        delegate void CopySubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D10_BOX pSrcBox);
        CopySubresourceRegionFunc m_CopySubresourceRegionFunc;

        public void CopyResource(IntPtr pDstResource, IntPtr pSrcResource)
        {
            if(m_CopyResourceFunc==null){
                var fp = GetFunctionPointer(33);
                m_CopyResourceFunc = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            } 
             m_CopyResourceFunc(m_ptr, pDstResource, pSrcResource);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);
        CopyResourceFunc m_CopyResourceFunc;

        public void UpdateSubresource(IntPtr pDstResource, uint DstSubresource, ref D3D10_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
        {
            if(m_UpdateSubresourceFunc==null){
                var fp = GetFunctionPointer(34);
                m_UpdateSubresourceFunc = (UpdateSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateSubresourceFunc));
            } 
             m_UpdateSubresourceFunc(m_ptr, pDstResource, DstSubresource, ref pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }
        delegate void UpdateSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, ref D3D10_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
        UpdateSubresourceFunc m_UpdateSubresourceFunc;

        public void ClearRenderTargetView(IntPtr pRenderTargetView, ref float ColorRGBA)
        {
            if(m_ClearRenderTargetViewFunc==null){
                var fp = GetFunctionPointer(35);
                m_ClearRenderTargetViewFunc = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            } 
             m_ClearRenderTargetViewFunc(m_ptr, pRenderTargetView, ref ColorRGBA);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, IntPtr pRenderTargetView, ref float ColorRGBA);
        ClearRenderTargetViewFunc m_ClearRenderTargetViewFunc;

        public void ClearDepthStencilView(IntPtr pDepthStencilView, uint ClearFlags, float Depth, byte Stencil)
        {
            if(m_ClearDepthStencilViewFunc==null){
                var fp = GetFunctionPointer(36);
                m_ClearDepthStencilViewFunc = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            } 
             m_ClearDepthStencilViewFunc(m_ptr, pDepthStencilView, ClearFlags, Depth, Stencil);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, IntPtr pDepthStencilView, uint ClearFlags, float Depth, byte Stencil);
        ClearDepthStencilViewFunc m_ClearDepthStencilViewFunc;

        public void GenerateMips(IntPtr pShaderResourceView)
        {
            if(m_GenerateMipsFunc==null){
                var fp = GetFunctionPointer(37);
                m_GenerateMipsFunc = (GenerateMipsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateMipsFunc));
            } 
             m_GenerateMipsFunc(m_ptr, pShaderResourceView);
        }
        delegate void GenerateMipsFunc(IntPtr self, IntPtr pShaderResourceView);
        GenerateMipsFunc m_GenerateMipsFunc;

        public void ResolveSubresource(IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format)
        {
            if(m_ResolveSubresourceFunc==null){
                var fp = GetFunctionPointer(38);
                m_ResolveSubresourceFunc = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            } 
             m_ResolveSubresourceFunc(m_ptr, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
        ResolveSubresourceFunc m_ResolveSubresourceFunc;

        public void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_VSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(39);
                m_VSGetConstantBuffersFunc = (VSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetConstantBuffersFunc));
            } 
             m_VSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        VSGetConstantBuffersFunc m_VSGetConstantBuffersFunc;

        public void PSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_PSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(40);
                m_PSGetShaderResourcesFunc = (PSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderResourcesFunc));
            } 
             m_PSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        PSGetShaderResourcesFunc m_PSGetShaderResourcesFunc;

        public void PSGetShader(ref IntPtr ppPixelShader)
        {
            if(m_PSGetShaderFunc==null){
                var fp = GetFunctionPointer(41);
                m_PSGetShaderFunc = (PSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderFunc));
            } 
             m_PSGetShaderFunc(m_ptr, ref ppPixelShader);
        }
        delegate void PSGetShaderFunc(IntPtr self, ref IntPtr ppPixelShader);
        PSGetShaderFunc m_PSGetShaderFunc;

        public void PSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_PSGetSamplersFunc==null){
                var fp = GetFunctionPointer(42);
                m_PSGetSamplersFunc = (PSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetSamplersFunc));
            } 
             m_PSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        PSGetSamplersFunc m_PSGetSamplersFunc;

        public void VSGetShader(ref IntPtr ppVertexShader)
        {
            if(m_VSGetShaderFunc==null){
                var fp = GetFunctionPointer(43);
                m_VSGetShaderFunc = (VSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderFunc));
            } 
             m_VSGetShaderFunc(m_ptr, ref ppVertexShader);
        }
        delegate void VSGetShaderFunc(IntPtr self, ref IntPtr ppVertexShader);
        VSGetShaderFunc m_VSGetShaderFunc;

        public void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_PSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(44);
                m_PSGetConstantBuffersFunc = (PSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetConstantBuffersFunc));
            } 
             m_PSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        PSGetConstantBuffersFunc m_PSGetConstantBuffersFunc;

        public void IAGetInputLayout(ref IntPtr ppInputLayout)
        {
            if(m_IAGetInputLayoutFunc==null){
                var fp = GetFunctionPointer(45);
                m_IAGetInputLayoutFunc = (IAGetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetInputLayoutFunc));
            } 
             m_IAGetInputLayoutFunc(m_ptr, ref ppInputLayout);
        }
        delegate void IAGetInputLayoutFunc(IntPtr self, ref IntPtr ppInputLayout);
        IAGetInputLayoutFunc m_IAGetInputLayoutFunc;

        public void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
        {
            if(m_IAGetVertexBuffersFunc==null){
                var fp = GetFunctionPointer(46);
                m_IAGetVertexBuffersFunc = (IAGetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetVertexBuffersFunc));
            } 
             m_IAGetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IAGetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);
        IAGetVertexBuffersFunc m_IAGetVertexBuffersFunc;

        public void IAGetIndexBuffer(ref IntPtr pIndexBuffer, ref DXGI_FORMAT Format, ref uint Offset)
        {
            if(m_IAGetIndexBufferFunc==null){
                var fp = GetFunctionPointer(47);
                m_IAGetIndexBufferFunc = (IAGetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetIndexBufferFunc));
            } 
             m_IAGetIndexBufferFunc(m_ptr, ref pIndexBuffer, ref Format, ref Offset);
        }
        delegate void IAGetIndexBufferFunc(IntPtr self, ref IntPtr pIndexBuffer, ref DXGI_FORMAT Format, ref uint Offset);
        IAGetIndexBufferFunc m_IAGetIndexBufferFunc;

        public void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers)
        {
            if(m_GSGetConstantBuffersFunc==null){
                var fp = GetFunctionPointer(48);
                m_GSGetConstantBuffersFunc = (GSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetConstantBuffersFunc));
            } 
             m_GSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        GSGetConstantBuffersFunc m_GSGetConstantBuffersFunc;

        public void GSGetShader(ref IntPtr ppGeometryShader)
        {
            if(m_GSGetShaderFunc==null){
                var fp = GetFunctionPointer(49);
                m_GSGetShaderFunc = (GSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderFunc));
            } 
             m_GSGetShaderFunc(m_ptr, ref ppGeometryShader);
        }
        delegate void GSGetShaderFunc(IntPtr self, ref IntPtr ppGeometryShader);
        GSGetShaderFunc m_GSGetShaderFunc;

        public void IAGetPrimitiveTopology(IntPtr pTopology)
        {
            if(m_IAGetPrimitiveTopologyFunc==null){
                var fp = GetFunctionPointer(50);
                m_IAGetPrimitiveTopologyFunc = (IAGetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetPrimitiveTopologyFunc));
            } 
             m_IAGetPrimitiveTopologyFunc(m_ptr, pTopology);
        }
        delegate void IAGetPrimitiveTopologyFunc(IntPtr self, IntPtr pTopology);
        IAGetPrimitiveTopologyFunc m_IAGetPrimitiveTopologyFunc;

        public void VSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_VSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(51);
                m_VSGetShaderResourcesFunc = (VSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderResourcesFunc));
            } 
             m_VSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        VSGetShaderResourcesFunc m_VSGetShaderResourcesFunc;

        public void VSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_VSGetSamplersFunc==null){
                var fp = GetFunctionPointer(52);
                m_VSGetSamplersFunc = (VSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetSamplersFunc));
            } 
             m_VSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        VSGetSamplersFunc m_VSGetSamplersFunc;

        public void GetPredication(ref IntPtr ppPredicate, ref int pPredicateValue)
        {
            if(m_GetPredicationFunc==null){
                var fp = GetFunctionPointer(53);
                m_GetPredicationFunc = (GetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPredicationFunc));
            } 
             m_GetPredicationFunc(m_ptr, ref ppPredicate, ref pPredicateValue);
        }
        delegate void GetPredicationFunc(IntPtr self, ref IntPtr ppPredicate, ref int pPredicateValue);
        GetPredicationFunc m_GetPredicationFunc;

        public void GSGetShaderResources(uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews)
        {
            if(m_GSGetShaderResourcesFunc==null){
                var fp = GetFunctionPointer(54);
                m_GSGetShaderResourcesFunc = (GSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderResourcesFunc));
            } 
             m_GSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        GSGetShaderResourcesFunc m_GSGetShaderResourcesFunc;

        public void GSGetSamplers(uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers)
        {
            if(m_GSGetSamplersFunc==null){
                var fp = GetFunctionPointer(55);
                m_GSGetSamplersFunc = (GSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetSamplersFunc));
            } 
             m_GSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        GSGetSamplersFunc m_GSGetSamplersFunc;

        public void OMGetRenderTargets(uint NumViews, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView)
        {
            if(m_OMGetRenderTargetsFunc==null){
                var fp = GetFunctionPointer(56);
                m_OMGetRenderTargetsFunc = (OMGetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsFunc));
            } 
             m_OMGetRenderTargetsFunc(m_ptr, NumViews, ref ppRenderTargetViews, ref ppDepthStencilView);
        }
        delegate void OMGetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView);
        OMGetRenderTargetsFunc m_OMGetRenderTargetsFunc;

        public void OMGetBlendState(ref IntPtr ppBlendState, ref float BlendFactor, ref uint pSampleMask)
        {
            if(m_OMGetBlendStateFunc==null){
                var fp = GetFunctionPointer(57);
                m_OMGetBlendStateFunc = (OMGetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetBlendStateFunc));
            } 
             m_OMGetBlendStateFunc(m_ptr, ref ppBlendState, ref BlendFactor, ref pSampleMask);
        }
        delegate void OMGetBlendStateFunc(IntPtr self, ref IntPtr ppBlendState, ref float BlendFactor, ref uint pSampleMask);
        OMGetBlendStateFunc m_OMGetBlendStateFunc;

        public void OMGetDepthStencilState(ref IntPtr ppDepthStencilState, ref uint pStencilRef)
        {
            if(m_OMGetDepthStencilStateFunc==null){
                var fp = GetFunctionPointer(58);
                m_OMGetDepthStencilStateFunc = (OMGetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetDepthStencilStateFunc));
            } 
             m_OMGetDepthStencilStateFunc(m_ptr, ref ppDepthStencilState, ref pStencilRef);
        }
        delegate void OMGetDepthStencilStateFunc(IntPtr self, ref IntPtr ppDepthStencilState, ref uint pStencilRef);
        OMGetDepthStencilStateFunc m_OMGetDepthStencilStateFunc;

        public void SOGetTargets(uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets)
        {
            if(m_SOGetTargetsFunc==null){
                var fp = GetFunctionPointer(59);
                m_SOGetTargetsFunc = (SOGetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOGetTargetsFunc));
            } 
             m_SOGetTargetsFunc(m_ptr, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOGetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets);
        SOGetTargetsFunc m_SOGetTargetsFunc;

        public void RSGetState(ref IntPtr ppRasterizerState)
        {
            if(m_RSGetStateFunc==null){
                var fp = GetFunctionPointer(60);
                m_RSGetStateFunc = (RSGetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetStateFunc));
            } 
             m_RSGetStateFunc(m_ptr, ref ppRasterizerState);
        }
        delegate void RSGetStateFunc(IntPtr self, ref IntPtr ppRasterizerState);
        RSGetStateFunc m_RSGetStateFunc;

        public void RSGetViewports(ref uint NumViewports, ref D3D10_VIEWPORT pViewports)
        {
            if(m_RSGetViewportsFunc==null){
                var fp = GetFunctionPointer(61);
                m_RSGetViewportsFunc = (RSGetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetViewportsFunc));
            } 
             m_RSGetViewportsFunc(m_ptr, ref NumViewports, ref pViewports);
        }
        delegate void RSGetViewportsFunc(IntPtr self, ref uint NumViewports, ref D3D10_VIEWPORT pViewports);
        RSGetViewportsFunc m_RSGetViewportsFunc;

        public void RSGetScissorRects(ref uint NumRects, IntPtr pRects)
        {
            if(m_RSGetScissorRectsFunc==null){
                var fp = GetFunctionPointer(62);
                m_RSGetScissorRectsFunc = (RSGetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetScissorRectsFunc));
            } 
             m_RSGetScissorRectsFunc(m_ptr, ref NumRects, pRects);
        }
        delegate void RSGetScissorRectsFunc(IntPtr self, ref uint NumRects, IntPtr pRects);
        RSGetScissorRectsFunc m_RSGetScissorRectsFunc;

        public int GetDeviceRemovedReason()
        {
            if(m_GetDeviceRemovedReasonFunc==null){
                var fp = GetFunctionPointer(63);
                m_GetDeviceRemovedReasonFunc = (GetDeviceRemovedReasonFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceRemovedReasonFunc));
            } 
            return  m_GetDeviceRemovedReasonFunc(m_ptr);
        }
        delegate int GetDeviceRemovedReasonFunc(IntPtr self);
        GetDeviceRemovedReasonFunc m_GetDeviceRemovedReasonFunc;

        public int SetExceptionMode(uint RaiseFlags)
        {
            if(m_SetExceptionModeFunc==null){
                var fp = GetFunctionPointer(64);
                m_SetExceptionModeFunc = (SetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExceptionModeFunc));
            } 
            return  m_SetExceptionModeFunc(m_ptr, RaiseFlags);
        }
        delegate int SetExceptionModeFunc(IntPtr self, uint RaiseFlags);
        SetExceptionModeFunc m_SetExceptionModeFunc;

        public uint GetExceptionMode()
        {
            if(m_GetExceptionModeFunc==null){
                var fp = GetFunctionPointer(65);
                m_GetExceptionModeFunc = (GetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExceptionModeFunc));
            } 
            return  m_GetExceptionModeFunc(m_ptr);
        }
        delegate uint GetExceptionModeFunc(IntPtr self);
        GetExceptionModeFunc m_GetExceptionModeFunc;

        public int GetPrivateData(ref GUID guid, ref uint pDataSize, IntPtr pData)
        {
            if(m_GetPrivateDataFunc==null){
                var fp = GetFunctionPointer(66);
                m_GetPrivateDataFunc = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            } 
            return  m_GetPrivateDataFunc(m_ptr, ref guid, ref pDataSize, pData);
        }
        delegate int GetPrivateDataFunc(IntPtr self, ref GUID guid, ref uint pDataSize, IntPtr pData);
        GetPrivateDataFunc m_GetPrivateDataFunc;

        public int SetPrivateData(ref GUID guid, uint DataSize, IntPtr pData)
        {
            if(m_SetPrivateDataFunc==null){
                var fp = GetFunctionPointer(67);
                m_SetPrivateDataFunc = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            } 
            return  m_SetPrivateDataFunc(m_ptr, ref guid, DataSize, pData);
        }
        delegate int SetPrivateDataFunc(IntPtr self, ref GUID guid, uint DataSize, IntPtr pData);
        SetPrivateDataFunc m_SetPrivateDataFunc;

        public int SetPrivateDataInterface(ref GUID guid, IntPtr pData)
        {
            if(m_SetPrivateDataInterfaceFunc==null){
                var fp = GetFunctionPointer(68);
                m_SetPrivateDataInterfaceFunc = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            } 
            return  m_SetPrivateDataInterfaceFunc(m_ptr, ref guid, pData);
        }
        delegate int SetPrivateDataInterfaceFunc(IntPtr self, ref GUID guid, IntPtr pData);
        SetPrivateDataInterfaceFunc m_SetPrivateDataInterfaceFunc;

        public void ClearState()
        {
            if(m_ClearStateFunc==null){
                var fp = GetFunctionPointer(69);
                m_ClearStateFunc = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            } 
             m_ClearStateFunc(m_ptr);
        }
        delegate void ClearStateFunc(IntPtr self);
        ClearStateFunc m_ClearStateFunc;

        public void Flush()
        {
            if(m_FlushFunc==null){
                var fp = GetFunctionPointer(70);
                m_FlushFunc = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            } 
             m_FlushFunc(m_ptr);
        }
        delegate void FlushFunc(IntPtr self);
        FlushFunc m_FlushFunc;

        public int CreateBuffer(ref D3D10_BUFFER_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppBuffer)
        {
            if(m_CreateBufferFunc==null){
                var fp = GetFunctionPointer(71);
                m_CreateBufferFunc = (CreateBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBufferFunc));
            } 
            return  m_CreateBufferFunc(m_ptr, ref pDesc, ref pInitialData, ref ppBuffer);
        }
        delegate int CreateBufferFunc(IntPtr self, ref D3D10_BUFFER_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppBuffer);
        CreateBufferFunc m_CreateBufferFunc;

        public int CreateTexture1D(ref D3D10_TEXTURE1D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture1D)
        {
            if(m_CreateTexture1DFunc==null){
                var fp = GetFunctionPointer(72);
                m_CreateTexture1DFunc = (CreateTexture1DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture1DFunc));
            } 
            return  m_CreateTexture1DFunc(m_ptr, ref pDesc, ref pInitialData, ref ppTexture1D);
        }
        delegate int CreateTexture1DFunc(IntPtr self, ref D3D10_TEXTURE1D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture1D);
        CreateTexture1DFunc m_CreateTexture1DFunc;

        public int CreateTexture2D(ref D3D10_TEXTURE2D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture2D)
        {
            if(m_CreateTexture2DFunc==null){
                var fp = GetFunctionPointer(73);
                m_CreateTexture2DFunc = (CreateTexture2DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture2DFunc));
            } 
            return  m_CreateTexture2DFunc(m_ptr, ref pDesc, ref pInitialData, ref ppTexture2D);
        }
        delegate int CreateTexture2DFunc(IntPtr self, ref D3D10_TEXTURE2D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture2D);
        CreateTexture2DFunc m_CreateTexture2DFunc;

        public int CreateTexture3D(ref D3D10_TEXTURE3D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture3D)
        {
            if(m_CreateTexture3DFunc==null){
                var fp = GetFunctionPointer(74);
                m_CreateTexture3DFunc = (CreateTexture3DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture3DFunc));
            } 
            return  m_CreateTexture3DFunc(m_ptr, ref pDesc, ref pInitialData, ref ppTexture3D);
        }
        delegate int CreateTexture3DFunc(IntPtr self, ref D3D10_TEXTURE3D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture3D);
        CreateTexture3DFunc m_CreateTexture3DFunc;

        public int CreateShaderResourceView(IntPtr pResource, ref D3D10_SHADER_RESOURCE_VIEW_DESC pDesc, ref IntPtr ppSRView)
        {
            if(m_CreateShaderResourceViewFunc==null){
                var fp = GetFunctionPointer(75);
                m_CreateShaderResourceViewFunc = (CreateShaderResourceViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateShaderResourceViewFunc));
            } 
            return  m_CreateShaderResourceViewFunc(m_ptr, pResource, ref pDesc, ref ppSRView);
        }
        delegate int CreateShaderResourceViewFunc(IntPtr self, IntPtr pResource, ref D3D10_SHADER_RESOURCE_VIEW_DESC pDesc, ref IntPtr ppSRView);
        CreateShaderResourceViewFunc m_CreateShaderResourceViewFunc;

        public int CreateRenderTargetView(IntPtr pResource, ref D3D10_RENDER_TARGET_VIEW_DESC pDesc, ref IntPtr ppRTView)
        {
            if(m_CreateRenderTargetViewFunc==null){
                var fp = GetFunctionPointer(76);
                m_CreateRenderTargetViewFunc = (CreateRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRenderTargetViewFunc));
            } 
            return  m_CreateRenderTargetViewFunc(m_ptr, pResource, ref pDesc, ref ppRTView);
        }
        delegate int CreateRenderTargetViewFunc(IntPtr self, IntPtr pResource, ref D3D10_RENDER_TARGET_VIEW_DESC pDesc, ref IntPtr ppRTView);
        CreateRenderTargetViewFunc m_CreateRenderTargetViewFunc;

        public int CreateDepthStencilView(IntPtr pResource, ref D3D10_DEPTH_STENCIL_VIEW_DESC pDesc, ref IntPtr ppDepthStencilView)
        {
            if(m_CreateDepthStencilViewFunc==null){
                var fp = GetFunctionPointer(77);
                m_CreateDepthStencilViewFunc = (CreateDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilViewFunc));
            } 
            return  m_CreateDepthStencilViewFunc(m_ptr, pResource, ref pDesc, ref ppDepthStencilView);
        }
        delegate int CreateDepthStencilViewFunc(IntPtr self, IntPtr pResource, ref D3D10_DEPTH_STENCIL_VIEW_DESC pDesc, ref IntPtr ppDepthStencilView);
        CreateDepthStencilViewFunc m_CreateDepthStencilViewFunc;

        public int CreateInputLayout(ref D3D10_INPUT_ELEMENT_DESC pInputElementDescs, uint NumElements, IntPtr pShaderBytecodeWithInputSignature, ulong BytecodeLength, ref IntPtr ppInputLayout)
        {
            if(m_CreateInputLayoutFunc==null){
                var fp = GetFunctionPointer(78);
                m_CreateInputLayoutFunc = (CreateInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInputLayoutFunc));
            } 
            return  m_CreateInputLayoutFunc(m_ptr, ref pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ref ppInputLayout);
        }
        delegate int CreateInputLayoutFunc(IntPtr self, ref D3D10_INPUT_ELEMENT_DESC pInputElementDescs, uint NumElements, IntPtr pShaderBytecodeWithInputSignature, ulong BytecodeLength, ref IntPtr ppInputLayout);
        CreateInputLayoutFunc m_CreateInputLayoutFunc;

        public int CreateVertexShader(IntPtr pShaderBytecode, ulong BytecodeLength, ref IntPtr ppVertexShader)
        {
            if(m_CreateVertexShaderFunc==null){
                var fp = GetFunctionPointer(79);
                m_CreateVertexShaderFunc = (CreateVertexShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVertexShaderFunc));
            } 
            return  m_CreateVertexShaderFunc(m_ptr, pShaderBytecode, BytecodeLength, ref ppVertexShader);
        }
        delegate int CreateVertexShaderFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, ref IntPtr ppVertexShader);
        CreateVertexShaderFunc m_CreateVertexShaderFunc;

        public int CreateGeometryShader(IntPtr pShaderBytecode, ulong BytecodeLength, ref IntPtr ppGeometryShader)
        {
            if(m_CreateGeometryShaderFunc==null){
                var fp = GetFunctionPointer(80);
                m_CreateGeometryShaderFunc = (CreateGeometryShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderFunc));
            } 
            return  m_CreateGeometryShaderFunc(m_ptr, pShaderBytecode, BytecodeLength, ref ppGeometryShader);
        }
        delegate int CreateGeometryShaderFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, ref IntPtr ppGeometryShader);
        CreateGeometryShaderFunc m_CreateGeometryShaderFunc;

        public int CreateGeometryShaderWithStreamOutput(IntPtr pShaderBytecode, ulong BytecodeLength, ref D3D10_SO_DECLARATION_ENTRY pSODeclaration, uint NumEntries, uint OutputStreamStride, ref IntPtr ppGeometryShader)
        {
            if(m_CreateGeometryShaderWithStreamOutputFunc==null){
                var fp = GetFunctionPointer(81);
                m_CreateGeometryShaderWithStreamOutputFunc = (CreateGeometryShaderWithStreamOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderWithStreamOutputFunc));
            } 
            return  m_CreateGeometryShaderWithStreamOutputFunc(m_ptr, pShaderBytecode, BytecodeLength, ref pSODeclaration, NumEntries, OutputStreamStride, ref ppGeometryShader);
        }
        delegate int CreateGeometryShaderWithStreamOutputFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, ref D3D10_SO_DECLARATION_ENTRY pSODeclaration, uint NumEntries, uint OutputStreamStride, ref IntPtr ppGeometryShader);
        CreateGeometryShaderWithStreamOutputFunc m_CreateGeometryShaderWithStreamOutputFunc;

        public int CreatePixelShader(IntPtr pShaderBytecode, ulong BytecodeLength, ref IntPtr ppPixelShader)
        {
            if(m_CreatePixelShaderFunc==null){
                var fp = GetFunctionPointer(82);
                m_CreatePixelShaderFunc = (CreatePixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePixelShaderFunc));
            } 
            return  m_CreatePixelShaderFunc(m_ptr, pShaderBytecode, BytecodeLength, ref ppPixelShader);
        }
        delegate int CreatePixelShaderFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, ref IntPtr ppPixelShader);
        CreatePixelShaderFunc m_CreatePixelShaderFunc;

        public int CreateBlendState(ref D3D10_BLEND_DESC pBlendStateDesc, ref IntPtr ppBlendState)
        {
            if(m_CreateBlendStateFunc==null){
                var fp = GetFunctionPointer(83);
                m_CreateBlendStateFunc = (CreateBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBlendStateFunc));
            } 
            return  m_CreateBlendStateFunc(m_ptr, ref pBlendStateDesc, ref ppBlendState);
        }
        delegate int CreateBlendStateFunc(IntPtr self, ref D3D10_BLEND_DESC pBlendStateDesc, ref IntPtr ppBlendState);
        CreateBlendStateFunc m_CreateBlendStateFunc;

        public int CreateDepthStencilState(ref D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc, ref IntPtr ppDepthStencilState)
        {
            if(m_CreateDepthStencilStateFunc==null){
                var fp = GetFunctionPointer(84);
                m_CreateDepthStencilStateFunc = (CreateDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilStateFunc));
            } 
            return  m_CreateDepthStencilStateFunc(m_ptr, ref pDepthStencilDesc, ref ppDepthStencilState);
        }
        delegate int CreateDepthStencilStateFunc(IntPtr self, ref D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc, ref IntPtr ppDepthStencilState);
        CreateDepthStencilStateFunc m_CreateDepthStencilStateFunc;

        public int CreateRasterizerState(ref D3D10_RASTERIZER_DESC pRasterizerDesc, ref IntPtr ppRasterizerState)
        {
            if(m_CreateRasterizerStateFunc==null){
                var fp = GetFunctionPointer(85);
                m_CreateRasterizerStateFunc = (CreateRasterizerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRasterizerStateFunc));
            } 
            return  m_CreateRasterizerStateFunc(m_ptr, ref pRasterizerDesc, ref ppRasterizerState);
        }
        delegate int CreateRasterizerStateFunc(IntPtr self, ref D3D10_RASTERIZER_DESC pRasterizerDesc, ref IntPtr ppRasterizerState);
        CreateRasterizerStateFunc m_CreateRasterizerStateFunc;

        public int CreateSamplerState(ref D3D10_SAMPLER_DESC pSamplerDesc, ref IntPtr ppSamplerState)
        {
            if(m_CreateSamplerStateFunc==null){
                var fp = GetFunctionPointer(86);
                m_CreateSamplerStateFunc = (CreateSamplerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSamplerStateFunc));
            } 
            return  m_CreateSamplerStateFunc(m_ptr, ref pSamplerDesc, ref ppSamplerState);
        }
        delegate int CreateSamplerStateFunc(IntPtr self, ref D3D10_SAMPLER_DESC pSamplerDesc, ref IntPtr ppSamplerState);
        CreateSamplerStateFunc m_CreateSamplerStateFunc;

        public int CreateQuery(ref D3D10_QUERY_DESC pQueryDesc, ref IntPtr ppQuery)
        {
            if(m_CreateQueryFunc==null){
                var fp = GetFunctionPointer(87);
                m_CreateQueryFunc = (CreateQueryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateQueryFunc));
            } 
            return  m_CreateQueryFunc(m_ptr, ref pQueryDesc, ref ppQuery);
        }
        delegate int CreateQueryFunc(IntPtr self, ref D3D10_QUERY_DESC pQueryDesc, ref IntPtr ppQuery);
        CreateQueryFunc m_CreateQueryFunc;

        public int CreatePredicate(ref D3D10_QUERY_DESC pPredicateDesc, ref IntPtr ppPredicate)
        {
            if(m_CreatePredicateFunc==null){
                var fp = GetFunctionPointer(88);
                m_CreatePredicateFunc = (CreatePredicateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePredicateFunc));
            } 
            return  m_CreatePredicateFunc(m_ptr, ref pPredicateDesc, ref ppPredicate);
        }
        delegate int CreatePredicateFunc(IntPtr self, ref D3D10_QUERY_DESC pPredicateDesc, ref IntPtr ppPredicate);
        CreatePredicateFunc m_CreatePredicateFunc;

        public int CreateCounter(ref D3D10_COUNTER_DESC pCounterDesc, ref IntPtr ppCounter)
        {
            if(m_CreateCounterFunc==null){
                var fp = GetFunctionPointer(89);
                m_CreateCounterFunc = (CreateCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCounterFunc));
            } 
            return  m_CreateCounterFunc(m_ptr, ref pCounterDesc, ref ppCounter);
        }
        delegate int CreateCounterFunc(IntPtr self, ref D3D10_COUNTER_DESC pCounterDesc, ref IntPtr ppCounter);
        CreateCounterFunc m_CreateCounterFunc;

        public int CheckFormatSupport(DXGI_FORMAT Format, ref uint pFormatSupport)
        {
            if(m_CheckFormatSupportFunc==null){
                var fp = GetFunctionPointer(90);
                m_CheckFormatSupportFunc = (CheckFormatSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFormatSupportFunc));
            } 
            return  m_CheckFormatSupportFunc(m_ptr, Format, ref pFormatSupport);
        }
        delegate int CheckFormatSupportFunc(IntPtr self, DXGI_FORMAT Format, ref uint pFormatSupport);
        CheckFormatSupportFunc m_CheckFormatSupportFunc;

        public int CheckMultisampleQualityLevels(DXGI_FORMAT Format, uint SampleCount, ref uint pNumQualityLevels)
        {
            if(m_CheckMultisampleQualityLevelsFunc==null){
                var fp = GetFunctionPointer(91);
                m_CheckMultisampleQualityLevelsFunc = (CheckMultisampleQualityLevelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckMultisampleQualityLevelsFunc));
            } 
            return  m_CheckMultisampleQualityLevelsFunc(m_ptr, Format, SampleCount, ref pNumQualityLevels);
        }
        delegate int CheckMultisampleQualityLevelsFunc(IntPtr self, DXGI_FORMAT Format, uint SampleCount, ref uint pNumQualityLevels);
        CheckMultisampleQualityLevelsFunc m_CheckMultisampleQualityLevelsFunc;

        public void CheckCounterInfo(ref D3D10_COUNTER_INFO pCounterInfo)
        {
            if(m_CheckCounterInfoFunc==null){
                var fp = GetFunctionPointer(92);
                m_CheckCounterInfoFunc = (CheckCounterInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterInfoFunc));
            } 
             m_CheckCounterInfoFunc(m_ptr, ref pCounterInfo);
        }
        delegate void CheckCounterInfoFunc(IntPtr self, ref D3D10_COUNTER_INFO pCounterInfo);
        CheckCounterInfoFunc m_CheckCounterInfoFunc;

        public int CheckCounter(ref D3D10_COUNTER_DESC pDesc, ref D3D10_COUNTER_TYPE pType, ref uint pActiveCounters, ref sbyte szName, ref uint pNameLength, ref sbyte szUnits, ref uint pUnitsLength, ref sbyte szDescription, ref uint pDescriptionLength)
        {
            if(m_CheckCounterFunc==null){
                var fp = GetFunctionPointer(93);
                m_CheckCounterFunc = (CheckCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterFunc));
            } 
            return  m_CheckCounterFunc(m_ptr, ref pDesc, ref pType, ref pActiveCounters, ref szName, ref pNameLength, ref szUnits, ref pUnitsLength, ref szDescription, ref pDescriptionLength);
        }
        delegate int CheckCounterFunc(IntPtr self, ref D3D10_COUNTER_DESC pDesc, ref D3D10_COUNTER_TYPE pType, ref uint pActiveCounters, ref sbyte szName, ref uint pNameLength, ref sbyte szUnits, ref uint pUnitsLength, ref sbyte szDescription, ref uint pDescriptionLength);
        CheckCounterFunc m_CheckCounterFunc;

        public uint GetCreationFlags()
        {
            if(m_GetCreationFlagsFunc==null){
                var fp = GetFunctionPointer(94);
                m_GetCreationFlagsFunc = (GetCreationFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCreationFlagsFunc));
            } 
            return  m_GetCreationFlagsFunc(m_ptr);
        }
        delegate uint GetCreationFlagsFunc(IntPtr self);
        GetCreationFlagsFunc m_GetCreationFlagsFunc;

        public int OpenSharedResource(IntPtr hResource, ref Guid ReturnedInterface, ref IntPtr ppResource)
        {
            if(m_OpenSharedResourceFunc==null){
                var fp = GetFunctionPointer(95);
                m_OpenSharedResourceFunc = (OpenSharedResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenSharedResourceFunc));
            } 
            return  m_OpenSharedResourceFunc(m_ptr, hResource, ref ReturnedInterface, ref ppResource);
        }
        delegate int OpenSharedResourceFunc(IntPtr self, IntPtr hResource, ref Guid ReturnedInterface, ref IntPtr ppResource);
        OpenSharedResourceFunc m_OpenSharedResourceFunc;

        public void SetTextFilterSize(uint Width, uint Height)
        {
            if(m_SetTextFilterSizeFunc==null){
                var fp = GetFunctionPointer(96);
                m_SetTextFilterSizeFunc = (SetTextFilterSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextFilterSizeFunc));
            } 
             m_SetTextFilterSizeFunc(m_ptr, Width, Height);
        }
        delegate void SetTextFilterSizeFunc(IntPtr self, uint Width, uint Height);
        SetTextFilterSizeFunc m_SetTextFilterSizeFunc;

        public void GetTextFilterSize(ref uint pWidth, ref uint pHeight)
        {
            if(m_GetTextFilterSizeFunc==null){
                var fp = GetFunctionPointer(97);
                m_GetTextFilterSizeFunc = (GetTextFilterSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextFilterSizeFunc));
            } 
             m_GetTextFilterSizeFunc(m_ptr, ref pWidth, ref pHeight);
        }
        delegate void GetTextFilterSizeFunc(IntPtr self, ref uint pWidth, ref uint pHeight);
        GetTextFilterSizeFunc m_GetTextFilterSizeFunc;

    }
}
