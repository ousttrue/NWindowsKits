// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OAIdl.h:4779
    public class ITypeMarshal : IUnknown // 1
    {
        static Guid s_uuid = new Guid("0000002d-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int Size(IntPtr pvType, uint dwDestContext, IntPtr pvDestContext, IntPtr pSize)
        {
            if(m_SizeFunc==null){
                var fp = GetFunctionPointer(3);
                m_SizeFunc = (SizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SizeFunc));
            } 
            return  m_SizeFunc(m_ptr, pvType, dwDestContext, pvDestContext, pSize);
        }
        delegate int SizeFunc(IntPtr self, IntPtr pvType, uint dwDestContext, IntPtr pvDestContext, IntPtr pSize);
        SizeFunc m_SizeFunc;

        public int _Marshal(IntPtr pvType, uint dwDestContext, IntPtr pvDestContext, uint cbBufferLength, ref byte pBuffer, IntPtr pcbWritten)
        {
            if(m__MarshalFunc==null){
                var fp = GetFunctionPointer(4);
                m__MarshalFunc = (_MarshalFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(_MarshalFunc));
            } 
            return  m__MarshalFunc(m_ptr, pvType, dwDestContext, pvDestContext, cbBufferLength, ref pBuffer, pcbWritten);
        }
        delegate int _MarshalFunc(IntPtr self, IntPtr pvType, uint dwDestContext, IntPtr pvDestContext, uint cbBufferLength, ref byte pBuffer, IntPtr pcbWritten);
        _MarshalFunc m__MarshalFunc;

        public int Unmarshal(IntPtr pvType, uint dwFlags, uint cbBufferLength, ref byte pBuffer, IntPtr pcbRead)
        {
            if(m_UnmarshalFunc==null){
                var fp = GetFunctionPointer(5);
                m_UnmarshalFunc = (UnmarshalFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmarshalFunc));
            } 
            return  m_UnmarshalFunc(m_ptr, pvType, dwFlags, cbBufferLength, ref pBuffer, pcbRead);
        }
        delegate int UnmarshalFunc(IntPtr self, IntPtr pvType, uint dwFlags, uint cbBufferLength, ref byte pBuffer, IntPtr pcbRead);
        UnmarshalFunc m_UnmarshalFunc;

        public int Free(IntPtr pvType)
        {
            if(m_FreeFunc==null){
                var fp = GetFunctionPointer(6);
                m_FreeFunc = (FreeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FreeFunc));
            } 
            return  m_FreeFunc(m_ptr, pvType);
        }
        delegate int FreeFunc(IntPtr self, IntPtr pvType);
        FreeFunc m_FreeFunc;

    }
}
