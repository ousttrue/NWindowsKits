// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OAIdl.h:3703
    public class ITypeLib : IUnknown
    {
        static Guid s_uuid = new Guid("00020402-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public uint GetTypeInfoCount()
        {
            if(m_GetTypeInfoCountFunc==null){
                var fp = GetFunctionPointer(3);
                m_GetTypeInfoCountFunc = (GetTypeInfoCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoCountFunc));
            } 
            return  m_GetTypeInfoCountFunc(m_ptr);
        }
        delegate uint GetTypeInfoCountFunc(IntPtr self);
        GetTypeInfoCountFunc m_GetTypeInfoCountFunc;

        public int GetTypeInfo(uint index, ref IntPtr ppTInfo)
        {
            if(m_GetTypeInfoFunc==null){
                var fp = GetFunctionPointer(4);
                m_GetTypeInfoFunc = (GetTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoFunc));
            } 
            return  m_GetTypeInfoFunc(m_ptr, index, ref ppTInfo);
        }
        delegate int GetTypeInfoFunc(IntPtr self, uint index, ref IntPtr ppTInfo);
        GetTypeInfoFunc m_GetTypeInfoFunc;

        public int GetTypeInfoType(uint index, ref TYPEKIND pTKind)
        {
            if(m_GetTypeInfoTypeFunc==null){
                var fp = GetFunctionPointer(5);
                m_GetTypeInfoTypeFunc = (GetTypeInfoTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoTypeFunc));
            } 
            return  m_GetTypeInfoTypeFunc(m_ptr, index, ref pTKind);
        }
        delegate int GetTypeInfoTypeFunc(IntPtr self, uint index, ref TYPEKIND pTKind);
        GetTypeInfoTypeFunc m_GetTypeInfoTypeFunc;

        public int GetTypeInfoOfGuid(ref GUID guid, ref IntPtr ppTinfo)
        {
            if(m_GetTypeInfoOfGuidFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetTypeInfoOfGuidFunc = (GetTypeInfoOfGuidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoOfGuidFunc));
            } 
            return  m_GetTypeInfoOfGuidFunc(m_ptr, ref guid, ref ppTinfo);
        }
        delegate int GetTypeInfoOfGuidFunc(IntPtr self, ref GUID guid, ref IntPtr ppTinfo);
        GetTypeInfoOfGuidFunc m_GetTypeInfoOfGuidFunc;

        public int GetLibAttr(ref IntPtr ppTLibAttr)
        {
            if(m_GetLibAttrFunc==null){
                var fp = GetFunctionPointer(7);
                m_GetLibAttrFunc = (GetLibAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLibAttrFunc));
            } 
            return  m_GetLibAttrFunc(m_ptr, ref ppTLibAttr);
        }
        delegate int GetLibAttrFunc(IntPtr self, ref IntPtr ppTLibAttr);
        GetLibAttrFunc m_GetLibAttrFunc;

        public int GetTypeComp(ref IntPtr ppTComp)
        {
            if(m_GetTypeCompFunc==null){
                var fp = GetFunctionPointer(8);
                m_GetTypeCompFunc = (GetTypeCompFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeCompFunc));
            } 
            return  m_GetTypeCompFunc(m_ptr, ref ppTComp);
        }
        delegate int GetTypeCompFunc(IntPtr self, ref IntPtr ppTComp);
        GetTypeCompFunc m_GetTypeCompFunc;

        public int GetDocumentation(int index, ref IntPtr pBstrName, ref IntPtr pBstrDocString, ref uint pdwHelpContext, ref IntPtr pBstrHelpFile)
        {
            if(m_GetDocumentationFunc==null){
                var fp = GetFunctionPointer(9);
                m_GetDocumentationFunc = (GetDocumentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDocumentationFunc));
            } 
            return  m_GetDocumentationFunc(m_ptr, index, ref pBstrName, ref pBstrDocString, ref pdwHelpContext, ref pBstrHelpFile);
        }
        delegate int GetDocumentationFunc(IntPtr self, int index, ref IntPtr pBstrName, ref IntPtr pBstrDocString, ref uint pdwHelpContext, ref IntPtr pBstrHelpFile);
        GetDocumentationFunc m_GetDocumentationFunc;

        public int IsName(IntPtr szNameBuf, uint lHashVal, ref int pfName)
        {
            if(m_IsNameFunc==null){
                var fp = GetFunctionPointer(10);
                m_IsNameFunc = (IsNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsNameFunc));
            } 
            return  m_IsNameFunc(m_ptr, szNameBuf, lHashVal, ref pfName);
        }
        delegate int IsNameFunc(IntPtr self, IntPtr szNameBuf, uint lHashVal, ref int pfName);
        IsNameFunc m_IsNameFunc;

        public int FindName(IntPtr szNameBuf, uint lHashVal, ref IntPtr ppTInfo, IntPtr rgMemId, ref ushort pcFound)
        {
            if(m_FindNameFunc==null){
                var fp = GetFunctionPointer(11);
                m_FindNameFunc = (FindNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindNameFunc));
            } 
            return  m_FindNameFunc(m_ptr, szNameBuf, lHashVal, ref ppTInfo, rgMemId, ref pcFound);
        }
        delegate int FindNameFunc(IntPtr self, IntPtr szNameBuf, uint lHashVal, ref IntPtr ppTInfo, IntPtr rgMemId, ref ushort pcFound);
        FindNameFunc m_FindNameFunc;

        public void ReleaseTLibAttr(ref TLIBATTR pTLibAttr)
        {
            if(m_ReleaseTLibAttrFunc==null){
                var fp = GetFunctionPointer(12);
                m_ReleaseTLibAttrFunc = (ReleaseTLibAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseTLibAttrFunc));
            } 
             m_ReleaseTLibAttrFunc(m_ptr, ref pTLibAttr);
        }
        delegate void ReleaseTLibAttrFunc(IntPtr self, ref TLIBATTR pTLibAttr);
        ReleaseTLibAttrFunc m_ReleaseTLibAttrFunc;

    }
}
