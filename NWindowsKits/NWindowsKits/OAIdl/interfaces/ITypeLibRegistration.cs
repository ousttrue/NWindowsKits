// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OAIdl.h:5461
    public class ITypeLibRegistration : IUnknown
    {
        static Guid s_uuid = new Guid("76a3e735-02df-4a12-98eb-043ad3600af3");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetGuid(ref GUID pGuid)
        {
            if(m_GetGuidFunc==null){
                var fp = GetFunctionPointer(3);
                m_GetGuidFunc = (GetGuidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGuidFunc));
            } 
            return  m_GetGuidFunc(m_ptr, ref pGuid);
        }
        delegate int GetGuidFunc(IntPtr self, ref GUID pGuid);
        GetGuidFunc m_GetGuidFunc;

        public int GetVersion(ref IntPtr pVersion)
        {
            if(m_GetVersionFunc==null){
                var fp = GetFunctionPointer(4);
                m_GetVersionFunc = (GetVersionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVersionFunc));
            } 
            return  m_GetVersionFunc(m_ptr, ref pVersion);
        }
        delegate int GetVersionFunc(IntPtr self, ref IntPtr pVersion);
        GetVersionFunc m_GetVersionFunc;

        public int GetLcid(IntPtr pLcid)
        {
            if(m_GetLcidFunc==null){
                var fp = GetFunctionPointer(5);
                m_GetLcidFunc = (GetLcidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLcidFunc));
            } 
            return  m_GetLcidFunc(m_ptr, pLcid);
        }
        delegate int GetLcidFunc(IntPtr self, IntPtr pLcid);
        GetLcidFunc m_GetLcidFunc;

        public int GetWin32Path(ref IntPtr pWin32Path)
        {
            if(m_GetWin32PathFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetWin32PathFunc = (GetWin32PathFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWin32PathFunc));
            } 
            return  m_GetWin32PathFunc(m_ptr, ref pWin32Path);
        }
        delegate int GetWin32PathFunc(IntPtr self, ref IntPtr pWin32Path);
        GetWin32PathFunc m_GetWin32PathFunc;

        public int GetWin64Path(ref IntPtr pWin64Path)
        {
            if(m_GetWin64PathFunc==null){
                var fp = GetFunctionPointer(7);
                m_GetWin64PathFunc = (GetWin64PathFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWin64PathFunc));
            } 
            return  m_GetWin64PathFunc(m_ptr, ref pWin64Path);
        }
        delegate int GetWin64PathFunc(IntPtr self, ref IntPtr pWin64Path);
        GetWin64PathFunc m_GetWin64PathFunc;

        public int GetDisplayName(ref IntPtr pDisplayName)
        {
            if(m_GetDisplayNameFunc==null){
                var fp = GetFunctionPointer(8);
                m_GetDisplayNameFunc = (GetDisplayNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplayNameFunc));
            } 
            return  m_GetDisplayNameFunc(m_ptr, ref pDisplayName);
        }
        delegate int GetDisplayNameFunc(IntPtr self, ref IntPtr pDisplayName);
        GetDisplayNameFunc m_GetDisplayNameFunc;

        public int GetFlags(ref uint pFlags)
        {
            if(m_GetFlagsFunc==null){
                var fp = GetFunctionPointer(9);
                m_GetFlagsFunc = (GetFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFlagsFunc));
            } 
            return  m_GetFlagsFunc(m_ptr, ref pFlags);
        }
        delegate int GetFlagsFunc(IntPtr self, ref uint pFlags);
        GetFlagsFunc m_GetFlagsFunc;

        public int GetHelpDir(ref IntPtr pHelpDir)
        {
            if(m_GetHelpDirFunc==null){
                var fp = GetFunctionPointer(10);
                m_GetHelpDirFunc = (GetHelpDirFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetHelpDirFunc));
            } 
            return  m_GetHelpDirFunc(m_ptr, ref pHelpDir);
        }
        delegate int GetHelpDirFunc(IntPtr self, ref IntPtr pHelpDir);
        GetHelpDirFunc m_GetHelpDirFunc;

    }
}
