// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OAIdl.h:2682
    public class ITypeInfo : IUnknown
    {
        static Guid s_uuid = new Guid("00020401-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetTypeAttr(ref IntPtr ppTypeAttr)
        {
            if(m_GetTypeAttrFunc==null){
                var fp = GetFunctionPointer(3);
                m_GetTypeAttrFunc = (GetTypeAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeAttrFunc));
            } 
            return  m_GetTypeAttrFunc(m_ptr, ref ppTypeAttr);
        }
        delegate int GetTypeAttrFunc(IntPtr self, ref IntPtr ppTypeAttr);
        GetTypeAttrFunc m_GetTypeAttrFunc;

        public int GetTypeComp(ref IntPtr ppTComp)
        {
            if(m_GetTypeCompFunc==null){
                var fp = GetFunctionPointer(4);
                m_GetTypeCompFunc = (GetTypeCompFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeCompFunc));
            } 
            return  m_GetTypeCompFunc(m_ptr, ref ppTComp);
        }
        delegate int GetTypeCompFunc(IntPtr self, ref IntPtr ppTComp);
        GetTypeCompFunc m_GetTypeCompFunc;

        public int GetFuncDesc(uint index, ref IntPtr ppFuncDesc)
        {
            if(m_GetFuncDescFunc==null){
                var fp = GetFunctionPointer(5);
                m_GetFuncDescFunc = (GetFuncDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFuncDescFunc));
            } 
            return  m_GetFuncDescFunc(m_ptr, index, ref ppFuncDesc);
        }
        delegate int GetFuncDescFunc(IntPtr self, uint index, ref IntPtr ppFuncDesc);
        GetFuncDescFunc m_GetFuncDescFunc;

        public int GetVarDesc(uint index, ref IntPtr ppVarDesc)
        {
            if(m_GetVarDescFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetVarDescFunc = (GetVarDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVarDescFunc));
            } 
            return  m_GetVarDescFunc(m_ptr, index, ref ppVarDesc);
        }
        delegate int GetVarDescFunc(IntPtr self, uint index, ref IntPtr ppVarDesc);
        GetVarDescFunc m_GetVarDescFunc;

        public int GetNames(int memid, ref IntPtr rgBstrNames, uint cMaxNames, ref uint pcNames)
        {
            if(m_GetNamesFunc==null){
                var fp = GetFunctionPointer(7);
                m_GetNamesFunc = (GetNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNamesFunc));
            } 
            return  m_GetNamesFunc(m_ptr, memid, ref rgBstrNames, cMaxNames, ref pcNames);
        }
        delegate int GetNamesFunc(IntPtr self, int memid, ref IntPtr rgBstrNames, uint cMaxNames, ref uint pcNames);
        GetNamesFunc m_GetNamesFunc;

        public int GetRefTypeOfImplType(uint index, IntPtr pRefType)
        {
            if(m_GetRefTypeOfImplTypeFunc==null){
                var fp = GetFunctionPointer(8);
                m_GetRefTypeOfImplTypeFunc = (GetRefTypeOfImplTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRefTypeOfImplTypeFunc));
            } 
            return  m_GetRefTypeOfImplTypeFunc(m_ptr, index, pRefType);
        }
        delegate int GetRefTypeOfImplTypeFunc(IntPtr self, uint index, IntPtr pRefType);
        GetRefTypeOfImplTypeFunc m_GetRefTypeOfImplTypeFunc;

        public int GetImplTypeFlags(uint index, ref int pImplTypeFlags)
        {
            if(m_GetImplTypeFlagsFunc==null){
                var fp = GetFunctionPointer(9);
                m_GetImplTypeFlagsFunc = (GetImplTypeFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImplTypeFlagsFunc));
            } 
            return  m_GetImplTypeFlagsFunc(m_ptr, index, ref pImplTypeFlags);
        }
        delegate int GetImplTypeFlagsFunc(IntPtr self, uint index, ref int pImplTypeFlags);
        GetImplTypeFlagsFunc m_GetImplTypeFlagsFunc;

        public int GetIDsOfNames(ref IntPtr rgszNames, uint cNames, IntPtr pMemId)
        {
            if(m_GetIDsOfNamesFunc==null){
                var fp = GetFunctionPointer(10);
                m_GetIDsOfNamesFunc = (GetIDsOfNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIDsOfNamesFunc));
            } 
            return  m_GetIDsOfNamesFunc(m_ptr, ref rgszNames, cNames, pMemId);
        }
        delegate int GetIDsOfNamesFunc(IntPtr self, ref IntPtr rgszNames, uint cNames, IntPtr pMemId);
        GetIDsOfNamesFunc m_GetIDsOfNamesFunc;

        public int Invoke(IntPtr pvInstance, int memid, ushort wFlags, ref DISPPARAMS pDispParams, ref VARIANT pVarResult, ref EXCEPINFO pExcepInfo, ref uint puArgErr)
        {
            if(m_InvokeFunc==null){
                var fp = GetFunctionPointer(11);
                m_InvokeFunc = (InvokeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvokeFunc));
            } 
            return  m_InvokeFunc(m_ptr, pvInstance, memid, wFlags, ref pDispParams, ref pVarResult, ref pExcepInfo, ref puArgErr);
        }
        delegate int InvokeFunc(IntPtr self, IntPtr pvInstance, int memid, ushort wFlags, ref DISPPARAMS pDispParams, ref VARIANT pVarResult, ref EXCEPINFO pExcepInfo, ref uint puArgErr);
        InvokeFunc m_InvokeFunc;

        public int GetDocumentation(int memid, ref IntPtr pBstrName, ref IntPtr pBstrDocString, ref uint pdwHelpContext, ref IntPtr pBstrHelpFile)
        {
            if(m_GetDocumentationFunc==null){
                var fp = GetFunctionPointer(12);
                m_GetDocumentationFunc = (GetDocumentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDocumentationFunc));
            } 
            return  m_GetDocumentationFunc(m_ptr, memid, ref pBstrName, ref pBstrDocString, ref pdwHelpContext, ref pBstrHelpFile);
        }
        delegate int GetDocumentationFunc(IntPtr self, int memid, ref IntPtr pBstrName, ref IntPtr pBstrDocString, ref uint pdwHelpContext, ref IntPtr pBstrHelpFile);
        GetDocumentationFunc m_GetDocumentationFunc;

        public int GetDllEntry(int memid, INVOKEKIND invKind, ref IntPtr pBstrDllName, ref IntPtr pBstrName, ref ushort pwOrdinal)
        {
            if(m_GetDllEntryFunc==null){
                var fp = GetFunctionPointer(13);
                m_GetDllEntryFunc = (GetDllEntryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDllEntryFunc));
            } 
            return  m_GetDllEntryFunc(m_ptr, memid, invKind, ref pBstrDllName, ref pBstrName, ref pwOrdinal);
        }
        delegate int GetDllEntryFunc(IntPtr self, int memid, INVOKEKIND invKind, ref IntPtr pBstrDllName, ref IntPtr pBstrName, ref ushort pwOrdinal);
        GetDllEntryFunc m_GetDllEntryFunc;

        public int GetRefTypeInfo(uint hRefType, ref IntPtr ppTInfo)
        {
            if(m_GetRefTypeInfoFunc==null){
                var fp = GetFunctionPointer(14);
                m_GetRefTypeInfoFunc = (GetRefTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRefTypeInfoFunc));
            } 
            return  m_GetRefTypeInfoFunc(m_ptr, hRefType, ref ppTInfo);
        }
        delegate int GetRefTypeInfoFunc(IntPtr self, uint hRefType, ref IntPtr ppTInfo);
        GetRefTypeInfoFunc m_GetRefTypeInfoFunc;

        public int AddressOfMember(int memid, INVOKEKIND invKind, ref IntPtr ppv)
        {
            if(m_AddressOfMemberFunc==null){
                var fp = GetFunctionPointer(15);
                m_AddressOfMemberFunc = (AddressOfMemberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddressOfMemberFunc));
            } 
            return  m_AddressOfMemberFunc(m_ptr, memid, invKind, ref ppv);
        }
        delegate int AddressOfMemberFunc(IntPtr self, int memid, INVOKEKIND invKind, ref IntPtr ppv);
        AddressOfMemberFunc m_AddressOfMemberFunc;

        public int CreateInstance(IntPtr pUnkOuter, ref Guid riid, ref IntPtr ppvObj)
        {
            if(m_CreateInstanceFunc==null){
                var fp = GetFunctionPointer(16);
                m_CreateInstanceFunc = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            } 
            return  m_CreateInstanceFunc(m_ptr, pUnkOuter, ref riid, ref ppvObj);
        }
        delegate int CreateInstanceFunc(IntPtr self, IntPtr pUnkOuter, ref Guid riid, ref IntPtr ppvObj);
        CreateInstanceFunc m_CreateInstanceFunc;

        public int GetMops(int memid, ref IntPtr pBstrMops)
        {
            if(m_GetMopsFunc==null){
                var fp = GetFunctionPointer(17);
                m_GetMopsFunc = (GetMopsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMopsFunc));
            } 
            return  m_GetMopsFunc(m_ptr, memid, ref pBstrMops);
        }
        delegate int GetMopsFunc(IntPtr self, int memid, ref IntPtr pBstrMops);
        GetMopsFunc m_GetMopsFunc;

        public int GetContainingTypeLib(ref IntPtr ppTLib, ref uint pIndex)
        {
            if(m_GetContainingTypeLibFunc==null){
                var fp = GetFunctionPointer(18);
                m_GetContainingTypeLibFunc = (GetContainingTypeLibFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainingTypeLibFunc));
            } 
            return  m_GetContainingTypeLibFunc(m_ptr, ref ppTLib, ref pIndex);
        }
        delegate int GetContainingTypeLibFunc(IntPtr self, ref IntPtr ppTLib, ref uint pIndex);
        GetContainingTypeLibFunc m_GetContainingTypeLibFunc;

        public void ReleaseTypeAttr(ref TYPEATTR pTypeAttr)
        {
            if(m_ReleaseTypeAttrFunc==null){
                var fp = GetFunctionPointer(19);
                m_ReleaseTypeAttrFunc = (ReleaseTypeAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseTypeAttrFunc));
            } 
             m_ReleaseTypeAttrFunc(m_ptr, ref pTypeAttr);
        }
        delegate void ReleaseTypeAttrFunc(IntPtr self, ref TYPEATTR pTypeAttr);
        ReleaseTypeAttrFunc m_ReleaseTypeAttrFunc;

        public void ReleaseFuncDesc(ref FUNCDESC pFuncDesc)
        {
            if(m_ReleaseFuncDescFunc==null){
                var fp = GetFunctionPointer(20);
                m_ReleaseFuncDescFunc = (ReleaseFuncDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFuncDescFunc));
            } 
             m_ReleaseFuncDescFunc(m_ptr, ref pFuncDesc);
        }
        delegate void ReleaseFuncDescFunc(IntPtr self, ref FUNCDESC pFuncDesc);
        ReleaseFuncDescFunc m_ReleaseFuncDescFunc;

        public void ReleaseVarDesc(ref VARDESC pVarDesc)
        {
            if(m_ReleaseVarDescFunc==null){
                var fp = GetFunctionPointer(21);
                m_ReleaseVarDescFunc = (ReleaseVarDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseVarDescFunc));
            } 
             m_ReleaseVarDescFunc(m_ptr, ref pVarDesc);
        }
        delegate void ReleaseVarDescFunc(IntPtr self, ref VARDESC pVarDesc);
        ReleaseVarDescFunc m_ReleaseVarDescFunc;

    }
}
