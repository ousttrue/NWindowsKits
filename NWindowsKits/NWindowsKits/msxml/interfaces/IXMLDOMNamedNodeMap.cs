// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/msxml.h:2380
    public class IXMLDOMNamedNodeMap : IDispatch
    {
        static Guid s_uuid = new Guid("2933bf83-7b36-11d2-b20e-00c04f983e60");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int getNamedItem(IntPtr name, ref IntPtr namedItem)
        {
            if(m_getNamedItemFunc==null){
                var fp = GetFunctionPointer(7);
                m_getNamedItemFunc = (getNamedItemFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(getNamedItemFunc));
            } 
            return  m_getNamedItemFunc(m_ptr, name, ref namedItem);
        }
        delegate int getNamedItemFunc(IntPtr self, IntPtr name, ref IntPtr namedItem);
        getNamedItemFunc m_getNamedItemFunc;

        public int setNamedItem(IntPtr newItem, ref IntPtr nameItem)
        {
            if(m_setNamedItemFunc==null){
                var fp = GetFunctionPointer(8);
                m_setNamedItemFunc = (setNamedItemFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(setNamedItemFunc));
            } 
            return  m_setNamedItemFunc(m_ptr, newItem, ref nameItem);
        }
        delegate int setNamedItemFunc(IntPtr self, IntPtr newItem, ref IntPtr nameItem);
        setNamedItemFunc m_setNamedItemFunc;

        public int removeNamedItem(IntPtr name, ref IntPtr namedItem)
        {
            if(m_removeNamedItemFunc==null){
                var fp = GetFunctionPointer(9);
                m_removeNamedItemFunc = (removeNamedItemFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(removeNamedItemFunc));
            } 
            return  m_removeNamedItemFunc(m_ptr, name, ref namedItem);
        }
        delegate int removeNamedItemFunc(IntPtr self, IntPtr name, ref IntPtr namedItem);
        removeNamedItemFunc m_removeNamedItemFunc;

        public int get_item(int index, ref IntPtr listItem)
        {
            if(m_get_itemFunc==null){
                var fp = GetFunctionPointer(10);
                m_get_itemFunc = (get_itemFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_itemFunc));
            } 
            return  m_get_itemFunc(m_ptr, index, ref listItem);
        }
        delegate int get_itemFunc(IntPtr self, int index, ref IntPtr listItem);
        get_itemFunc m_get_itemFunc;

        public int get_length(ref int listLength)
        {
            if(m_get_lengthFunc==null){
                var fp = GetFunctionPointer(11);
                m_get_lengthFunc = (get_lengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_lengthFunc));
            } 
            return  m_get_lengthFunc(m_ptr, ref listLength);
        }
        delegate int get_lengthFunc(IntPtr self, ref int listLength);
        get_lengthFunc m_get_lengthFunc;

        public int getQualifiedItem(IntPtr baseName, IntPtr namespaceURI, ref IntPtr qualifiedItem)
        {
            if(m_getQualifiedItemFunc==null){
                var fp = GetFunctionPointer(12);
                m_getQualifiedItemFunc = (getQualifiedItemFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(getQualifiedItemFunc));
            } 
            return  m_getQualifiedItemFunc(m_ptr, baseName, namespaceURI, ref qualifiedItem);
        }
        delegate int getQualifiedItemFunc(IntPtr self, IntPtr baseName, IntPtr namespaceURI, ref IntPtr qualifiedItem);
        getQualifiedItemFunc m_getQualifiedItemFunc;

        public int removeQualifiedItem(IntPtr baseName, IntPtr namespaceURI, ref IntPtr qualifiedItem)
        {
            if(m_removeQualifiedItemFunc==null){
                var fp = GetFunctionPointer(13);
                m_removeQualifiedItemFunc = (removeQualifiedItemFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(removeQualifiedItemFunc));
            } 
            return  m_removeQualifiedItemFunc(m_ptr, baseName, namespaceURI, ref qualifiedItem);
        }
        delegate int removeQualifiedItemFunc(IntPtr self, IntPtr baseName, IntPtr namespaceURI, ref IntPtr qualifiedItem);
        removeQualifiedItemFunc m_removeQualifiedItemFunc;

        public int nextNode(ref IntPtr nextItem)
        {
            if(m_nextNodeFunc==null){
                var fp = GetFunctionPointer(14);
                m_nextNodeFunc = (nextNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(nextNodeFunc));
            } 
            return  m_nextNodeFunc(m_ptr, ref nextItem);
        }
        delegate int nextNodeFunc(IntPtr self, ref IntPtr nextItem);
        nextNodeFunc m_nextNodeFunc;

        public int reset()
        {
            if(m_resetFunc==null){
                var fp = GetFunctionPointer(15);
                m_resetFunc = (resetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(resetFunc));
            } 
            return  m_resetFunc(m_ptr);
        }
        delegate int resetFunc(IntPtr self);
        resetFunc m_resetFunc;

        public int get__newEnum(ref IntPtr ppUnk)
        {
            if(m_get__newEnumFunc==null){
                var fp = GetFunctionPointer(16);
                m_get__newEnumFunc = (get__newEnumFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get__newEnumFunc));
            } 
            return  m_get__newEnumFunc(m_ptr, ref ppUnk);
        }
        delegate int get__newEnumFunc(IntPtr self, ref IntPtr ppUnk);
        get__newEnumFunc m_get__newEnumFunc;

    }
}
