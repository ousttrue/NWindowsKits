// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/msxml.h:582
    public class IXMLDOMNode : IDispatch
    {
        static Guid s_uuid = new Guid("2933bf80-7b36-11d2-b20e-00c04f983e60");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int get_nodeName(ref IntPtr name)
        {
            if(m_get_nodeNameFunc==null){
                var fp = GetFunctionPointer(7);
                m_get_nodeNameFunc = (get_nodeNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_nodeNameFunc));
            } 
            return  m_get_nodeNameFunc(m_ptr, ref name);
        }
        delegate int get_nodeNameFunc(IntPtr self, ref IntPtr name);
        get_nodeNameFunc m_get_nodeNameFunc;

        public int get_nodeValue(ref VARIANT value)
        {
            if(m_get_nodeValueFunc==null){
                var fp = GetFunctionPointer(8);
                m_get_nodeValueFunc = (get_nodeValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_nodeValueFunc));
            } 
            return  m_get_nodeValueFunc(m_ptr, ref value);
        }
        delegate int get_nodeValueFunc(IntPtr self, ref VARIANT value);
        get_nodeValueFunc m_get_nodeValueFunc;

        public int put_nodeValue(VARIANT value)
        {
            if(m_put_nodeValueFunc==null){
                var fp = GetFunctionPointer(9);
                m_put_nodeValueFunc = (put_nodeValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_nodeValueFunc));
            } 
            return  m_put_nodeValueFunc(m_ptr, value);
        }
        delegate int put_nodeValueFunc(IntPtr self, VARIANT value);
        put_nodeValueFunc m_put_nodeValueFunc;

        public int get_nodeType(ref DOMNodeType type)
        {
            if(m_get_nodeTypeFunc==null){
                var fp = GetFunctionPointer(10);
                m_get_nodeTypeFunc = (get_nodeTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_nodeTypeFunc));
            } 
            return  m_get_nodeTypeFunc(m_ptr, ref type);
        }
        delegate int get_nodeTypeFunc(IntPtr self, ref DOMNodeType type);
        get_nodeTypeFunc m_get_nodeTypeFunc;

        public int get_parentNode(ref IntPtr parent)
        {
            if(m_get_parentNodeFunc==null){
                var fp = GetFunctionPointer(11);
                m_get_parentNodeFunc = (get_parentNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_parentNodeFunc));
            } 
            return  m_get_parentNodeFunc(m_ptr, ref parent);
        }
        delegate int get_parentNodeFunc(IntPtr self, ref IntPtr parent);
        get_parentNodeFunc m_get_parentNodeFunc;

        public int get_childNodes(ref IntPtr childList)
        {
            if(m_get_childNodesFunc==null){
                var fp = GetFunctionPointer(12);
                m_get_childNodesFunc = (get_childNodesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_childNodesFunc));
            } 
            return  m_get_childNodesFunc(m_ptr, ref childList);
        }
        delegate int get_childNodesFunc(IntPtr self, ref IntPtr childList);
        get_childNodesFunc m_get_childNodesFunc;

        public int get_firstChild(ref IntPtr firstChild)
        {
            if(m_get_firstChildFunc==null){
                var fp = GetFunctionPointer(13);
                m_get_firstChildFunc = (get_firstChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_firstChildFunc));
            } 
            return  m_get_firstChildFunc(m_ptr, ref firstChild);
        }
        delegate int get_firstChildFunc(IntPtr self, ref IntPtr firstChild);
        get_firstChildFunc m_get_firstChildFunc;

        public int get_lastChild(ref IntPtr lastChild)
        {
            if(m_get_lastChildFunc==null){
                var fp = GetFunctionPointer(14);
                m_get_lastChildFunc = (get_lastChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_lastChildFunc));
            } 
            return  m_get_lastChildFunc(m_ptr, ref lastChild);
        }
        delegate int get_lastChildFunc(IntPtr self, ref IntPtr lastChild);
        get_lastChildFunc m_get_lastChildFunc;

        public int get_previousSibling(ref IntPtr previousSibling)
        {
            if(m_get_previousSiblingFunc==null){
                var fp = GetFunctionPointer(15);
                m_get_previousSiblingFunc = (get_previousSiblingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_previousSiblingFunc));
            } 
            return  m_get_previousSiblingFunc(m_ptr, ref previousSibling);
        }
        delegate int get_previousSiblingFunc(IntPtr self, ref IntPtr previousSibling);
        get_previousSiblingFunc m_get_previousSiblingFunc;

        public int get_nextSibling(ref IntPtr nextSibling)
        {
            if(m_get_nextSiblingFunc==null){
                var fp = GetFunctionPointer(16);
                m_get_nextSiblingFunc = (get_nextSiblingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_nextSiblingFunc));
            } 
            return  m_get_nextSiblingFunc(m_ptr, ref nextSibling);
        }
        delegate int get_nextSiblingFunc(IntPtr self, ref IntPtr nextSibling);
        get_nextSiblingFunc m_get_nextSiblingFunc;

        public int get_attributes(ref IntPtr attributeMap)
        {
            if(m_get_attributesFunc==null){
                var fp = GetFunctionPointer(17);
                m_get_attributesFunc = (get_attributesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_attributesFunc));
            } 
            return  m_get_attributesFunc(m_ptr, ref attributeMap);
        }
        delegate int get_attributesFunc(IntPtr self, ref IntPtr attributeMap);
        get_attributesFunc m_get_attributesFunc;

        public int insertBefore(IntPtr newChild, VARIANT refChild, ref IntPtr outNewChild)
        {
            if(m_insertBeforeFunc==null){
                var fp = GetFunctionPointer(18);
                m_insertBeforeFunc = (insertBeforeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(insertBeforeFunc));
            } 
            return  m_insertBeforeFunc(m_ptr, newChild, refChild, ref outNewChild);
        }
        delegate int insertBeforeFunc(IntPtr self, IntPtr newChild, VARIANT refChild, ref IntPtr outNewChild);
        insertBeforeFunc m_insertBeforeFunc;

        public int replaceChild(IntPtr newChild, IntPtr oldChild, ref IntPtr outOldChild)
        {
            if(m_replaceChildFunc==null){
                var fp = GetFunctionPointer(19);
                m_replaceChildFunc = (replaceChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(replaceChildFunc));
            } 
            return  m_replaceChildFunc(m_ptr, newChild, oldChild, ref outOldChild);
        }
        delegate int replaceChildFunc(IntPtr self, IntPtr newChild, IntPtr oldChild, ref IntPtr outOldChild);
        replaceChildFunc m_replaceChildFunc;

        public int removeChild(IntPtr childNode, ref IntPtr oldChild)
        {
            if(m_removeChildFunc==null){
                var fp = GetFunctionPointer(20);
                m_removeChildFunc = (removeChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(removeChildFunc));
            } 
            return  m_removeChildFunc(m_ptr, childNode, ref oldChild);
        }
        delegate int removeChildFunc(IntPtr self, IntPtr childNode, ref IntPtr oldChild);
        removeChildFunc m_removeChildFunc;

        public int appendChild(IntPtr newChild, ref IntPtr outNewChild)
        {
            if(m_appendChildFunc==null){
                var fp = GetFunctionPointer(21);
                m_appendChildFunc = (appendChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(appendChildFunc));
            } 
            return  m_appendChildFunc(m_ptr, newChild, ref outNewChild);
        }
        delegate int appendChildFunc(IntPtr self, IntPtr newChild, ref IntPtr outNewChild);
        appendChildFunc m_appendChildFunc;

        public int hasChildNodes(ref short hasChild)
        {
            if(m_hasChildNodesFunc==null){
                var fp = GetFunctionPointer(22);
                m_hasChildNodesFunc = (hasChildNodesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(hasChildNodesFunc));
            } 
            return  m_hasChildNodesFunc(m_ptr, ref hasChild);
        }
        delegate int hasChildNodesFunc(IntPtr self, ref short hasChild);
        hasChildNodesFunc m_hasChildNodesFunc;

        public int get_ownerDocument(ref IntPtr XMLDOMDocument)
        {
            if(m_get_ownerDocumentFunc==null){
                var fp = GetFunctionPointer(23);
                m_get_ownerDocumentFunc = (get_ownerDocumentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_ownerDocumentFunc));
            } 
            return  m_get_ownerDocumentFunc(m_ptr, ref XMLDOMDocument);
        }
        delegate int get_ownerDocumentFunc(IntPtr self, ref IntPtr XMLDOMDocument);
        get_ownerDocumentFunc m_get_ownerDocumentFunc;

        public int cloneNode(short deep, ref IntPtr cloneRoot)
        {
            if(m_cloneNodeFunc==null){
                var fp = GetFunctionPointer(24);
                m_cloneNodeFunc = (cloneNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(cloneNodeFunc));
            } 
            return  m_cloneNodeFunc(m_ptr, deep, ref cloneRoot);
        }
        delegate int cloneNodeFunc(IntPtr self, short deep, ref IntPtr cloneRoot);
        cloneNodeFunc m_cloneNodeFunc;

        public int get_nodeTypeString(ref IntPtr nodeType)
        {
            if(m_get_nodeTypeStringFunc==null){
                var fp = GetFunctionPointer(25);
                m_get_nodeTypeStringFunc = (get_nodeTypeStringFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_nodeTypeStringFunc));
            } 
            return  m_get_nodeTypeStringFunc(m_ptr, ref nodeType);
        }
        delegate int get_nodeTypeStringFunc(IntPtr self, ref IntPtr nodeType);
        get_nodeTypeStringFunc m_get_nodeTypeStringFunc;

        public int get_text(ref IntPtr text)
        {
            if(m_get_textFunc==null){
                var fp = GetFunctionPointer(26);
                m_get_textFunc = (get_textFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_textFunc));
            } 
            return  m_get_textFunc(m_ptr, ref text);
        }
        delegate int get_textFunc(IntPtr self, ref IntPtr text);
        get_textFunc m_get_textFunc;

        public int put_text(IntPtr text)
        {
            if(m_put_textFunc==null){
                var fp = GetFunctionPointer(27);
                m_put_textFunc = (put_textFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_textFunc));
            } 
            return  m_put_textFunc(m_ptr, text);
        }
        delegate int put_textFunc(IntPtr self, IntPtr text);
        put_textFunc m_put_textFunc;

        public int get_specified(ref short isSpecified)
        {
            if(m_get_specifiedFunc==null){
                var fp = GetFunctionPointer(28);
                m_get_specifiedFunc = (get_specifiedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_specifiedFunc));
            } 
            return  m_get_specifiedFunc(m_ptr, ref isSpecified);
        }
        delegate int get_specifiedFunc(IntPtr self, ref short isSpecified);
        get_specifiedFunc m_get_specifiedFunc;

        public int get_definition(ref IntPtr definitionNode)
        {
            if(m_get_definitionFunc==null){
                var fp = GetFunctionPointer(29);
                m_get_definitionFunc = (get_definitionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_definitionFunc));
            } 
            return  m_get_definitionFunc(m_ptr, ref definitionNode);
        }
        delegate int get_definitionFunc(IntPtr self, ref IntPtr definitionNode);
        get_definitionFunc m_get_definitionFunc;

        public int get_nodeTypedValue(ref VARIANT typedValue)
        {
            if(m_get_nodeTypedValueFunc==null){
                var fp = GetFunctionPointer(30);
                m_get_nodeTypedValueFunc = (get_nodeTypedValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_nodeTypedValueFunc));
            } 
            return  m_get_nodeTypedValueFunc(m_ptr, ref typedValue);
        }
        delegate int get_nodeTypedValueFunc(IntPtr self, ref VARIANT typedValue);
        get_nodeTypedValueFunc m_get_nodeTypedValueFunc;

        public int put_nodeTypedValue(VARIANT typedValue)
        {
            if(m_put_nodeTypedValueFunc==null){
                var fp = GetFunctionPointer(31);
                m_put_nodeTypedValueFunc = (put_nodeTypedValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_nodeTypedValueFunc));
            } 
            return  m_put_nodeTypedValueFunc(m_ptr, typedValue);
        }
        delegate int put_nodeTypedValueFunc(IntPtr self, VARIANT typedValue);
        put_nodeTypedValueFunc m_put_nodeTypedValueFunc;

        public int get_dataType(ref VARIANT dataTypeName)
        {
            if(m_get_dataTypeFunc==null){
                var fp = GetFunctionPointer(32);
                m_get_dataTypeFunc = (get_dataTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_dataTypeFunc));
            } 
            return  m_get_dataTypeFunc(m_ptr, ref dataTypeName);
        }
        delegate int get_dataTypeFunc(IntPtr self, ref VARIANT dataTypeName);
        get_dataTypeFunc m_get_dataTypeFunc;

        public int put_dataType(IntPtr dataTypeName)
        {
            if(m_put_dataTypeFunc==null){
                var fp = GetFunctionPointer(33);
                m_put_dataTypeFunc = (put_dataTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_dataTypeFunc));
            } 
            return  m_put_dataTypeFunc(m_ptr, dataTypeName);
        }
        delegate int put_dataTypeFunc(IntPtr self, IntPtr dataTypeName);
        put_dataTypeFunc m_put_dataTypeFunc;

        public int get_xml(ref IntPtr xmlString)
        {
            if(m_get_xmlFunc==null){
                var fp = GetFunctionPointer(34);
                m_get_xmlFunc = (get_xmlFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_xmlFunc));
            } 
            return  m_get_xmlFunc(m_ptr, ref xmlString);
        }
        delegate int get_xmlFunc(IntPtr self, ref IntPtr xmlString);
        get_xmlFunc m_get_xmlFunc;

        public int transformNode(IntPtr stylesheet, ref IntPtr xmlString)
        {
            if(m_transformNodeFunc==null){
                var fp = GetFunctionPointer(35);
                m_transformNodeFunc = (transformNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(transformNodeFunc));
            } 
            return  m_transformNodeFunc(m_ptr, stylesheet, ref xmlString);
        }
        delegate int transformNodeFunc(IntPtr self, IntPtr stylesheet, ref IntPtr xmlString);
        transformNodeFunc m_transformNodeFunc;

        public int selectNodes(IntPtr queryString, ref IntPtr resultList)
        {
            if(m_selectNodesFunc==null){
                var fp = GetFunctionPointer(36);
                m_selectNodesFunc = (selectNodesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(selectNodesFunc));
            } 
            return  m_selectNodesFunc(m_ptr, queryString, ref resultList);
        }
        delegate int selectNodesFunc(IntPtr self, IntPtr queryString, ref IntPtr resultList);
        selectNodesFunc m_selectNodesFunc;

        public int selectSingleNode(IntPtr queryString, ref IntPtr resultNode)
        {
            if(m_selectSingleNodeFunc==null){
                var fp = GetFunctionPointer(37);
                m_selectSingleNodeFunc = (selectSingleNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(selectSingleNodeFunc));
            } 
            return  m_selectSingleNodeFunc(m_ptr, queryString, ref resultNode);
        }
        delegate int selectSingleNodeFunc(IntPtr self, IntPtr queryString, ref IntPtr resultNode);
        selectSingleNodeFunc m_selectSingleNodeFunc;

        public int get_parsed(ref short isParsed)
        {
            if(m_get_parsedFunc==null){
                var fp = GetFunctionPointer(38);
                m_get_parsedFunc = (get_parsedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_parsedFunc));
            } 
            return  m_get_parsedFunc(m_ptr, ref isParsed);
        }
        delegate int get_parsedFunc(IntPtr self, ref short isParsed);
        get_parsedFunc m_get_parsedFunc;

        public int get_namespaceURI(ref IntPtr namespaceURI)
        {
            if(m_get_namespaceURIFunc==null){
                var fp = GetFunctionPointer(39);
                m_get_namespaceURIFunc = (get_namespaceURIFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_namespaceURIFunc));
            } 
            return  m_get_namespaceURIFunc(m_ptr, ref namespaceURI);
        }
        delegate int get_namespaceURIFunc(IntPtr self, ref IntPtr namespaceURI);
        get_namespaceURIFunc m_get_namespaceURIFunc;

        public int get_prefix(ref IntPtr prefixString)
        {
            if(m_get_prefixFunc==null){
                var fp = GetFunctionPointer(40);
                m_get_prefixFunc = (get_prefixFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_prefixFunc));
            } 
            return  m_get_prefixFunc(m_ptr, ref prefixString);
        }
        delegate int get_prefixFunc(IntPtr self, ref IntPtr prefixString);
        get_prefixFunc m_get_prefixFunc;

        public int get_baseName(ref IntPtr nameString)
        {
            if(m_get_baseNameFunc==null){
                var fp = GetFunctionPointer(41);
                m_get_baseNameFunc = (get_baseNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_baseNameFunc));
            } 
            return  m_get_baseNameFunc(m_ptr, ref nameString);
        }
        delegate int get_baseNameFunc(IntPtr self, ref IntPtr nameString);
        get_baseNameFunc m_get_baseNameFunc;

        public int transformNodeToObject(IntPtr stylesheet, VARIANT outputObject)
        {
            if(m_transformNodeToObjectFunc==null){
                var fp = GetFunctionPointer(42);
                m_transformNodeToObjectFunc = (transformNodeToObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(transformNodeToObjectFunc));
            } 
            return  m_transformNodeToObjectFunc(m_ptr, stylesheet, outputObject);
        }
        delegate int transformNodeToObjectFunc(IntPtr self, IntPtr stylesheet, VARIANT outputObject);
        transformNodeToObjectFunc m_transformNodeToObjectFunc;

    }
}
