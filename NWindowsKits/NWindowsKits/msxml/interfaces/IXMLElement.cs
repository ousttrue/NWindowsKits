// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/msxml.h:9375
    public class IXMLElement : IDispatch // 4
    {
        static Guid s_uuid = new Guid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int get_tagName(ref IntPtr p)
        {
            if(m_get_tagNameFunc==null){
                var fp = GetFunctionPointer(7);
                m_get_tagNameFunc = (get_tagNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_tagNameFunc));
            } 
            
            return  m_get_tagNameFunc(m_ptr, ref p);
        }
        delegate int get_tagNameFunc(IntPtr self, ref IntPtr p);
        get_tagNameFunc m_get_tagNameFunc;

        public int put_tagName(IntPtr p)
        {
            if(m_put_tagNameFunc==null){
                var fp = GetFunctionPointer(8);
                m_put_tagNameFunc = (put_tagNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_tagNameFunc));
            } 
            
            return  m_put_tagNameFunc(m_ptr, p);
        }
        delegate int put_tagNameFunc(IntPtr self, IntPtr p);
        put_tagNameFunc m_put_tagNameFunc;

        public int get_parent(ref IntPtr ppParent)
        {
            if(m_get_parentFunc==null){
                var fp = GetFunctionPointer(9);
                m_get_parentFunc = (get_parentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_parentFunc));
            } 
            
            return  m_get_parentFunc(m_ptr, ref ppParent);
        }
        delegate int get_parentFunc(IntPtr self, ref IntPtr ppParent);
        get_parentFunc m_get_parentFunc;

        public int setAttribute(IntPtr strPropertyName, VARIANT PropertyValue)
        {
            if(m_setAttributeFunc==null){
                var fp = GetFunctionPointer(10);
                m_setAttributeFunc = (setAttributeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(setAttributeFunc));
            } 
            
            return  m_setAttributeFunc(m_ptr, strPropertyName, PropertyValue);
        }
        delegate int setAttributeFunc(IntPtr self, IntPtr strPropertyName, VARIANT PropertyValue);
        setAttributeFunc m_setAttributeFunc;

        public int getAttribute(IntPtr strPropertyName, ref VARIANT PropertyValue)
        {
            if(m_getAttributeFunc==null){
                var fp = GetFunctionPointer(11);
                m_getAttributeFunc = (getAttributeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(getAttributeFunc));
            } 
            
            return  m_getAttributeFunc(m_ptr, strPropertyName, ref PropertyValue);
        }
        delegate int getAttributeFunc(IntPtr self, IntPtr strPropertyName, ref VARIANT PropertyValue);
        getAttributeFunc m_getAttributeFunc;

        public int removeAttribute(IntPtr strPropertyName)
        {
            if(m_removeAttributeFunc==null){
                var fp = GetFunctionPointer(12);
                m_removeAttributeFunc = (removeAttributeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(removeAttributeFunc));
            } 
            
            return  m_removeAttributeFunc(m_ptr, strPropertyName);
        }
        delegate int removeAttributeFunc(IntPtr self, IntPtr strPropertyName);
        removeAttributeFunc m_removeAttributeFunc;

        public int get_children(ref IntPtr pp)
        {
            if(m_get_childrenFunc==null){
                var fp = GetFunctionPointer(13);
                m_get_childrenFunc = (get_childrenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_childrenFunc));
            } 
            
            return  m_get_childrenFunc(m_ptr, ref pp);
        }
        delegate int get_childrenFunc(IntPtr self, ref IntPtr pp);
        get_childrenFunc m_get_childrenFunc;

        public int get_type(ref int plType)
        {
            if(m_get_typeFunc==null){
                var fp = GetFunctionPointer(14);
                m_get_typeFunc = (get_typeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_typeFunc));
            } 
            
            return  m_get_typeFunc(m_ptr, ref plType);
        }
        delegate int get_typeFunc(IntPtr self, ref int plType);
        get_typeFunc m_get_typeFunc;

        public int get_text(ref IntPtr p)
        {
            if(m_get_textFunc==null){
                var fp = GetFunctionPointer(15);
                m_get_textFunc = (get_textFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_textFunc));
            } 
            
            return  m_get_textFunc(m_ptr, ref p);
        }
        delegate int get_textFunc(IntPtr self, ref IntPtr p);
        get_textFunc m_get_textFunc;

        public int put_text(IntPtr p)
        {
            if(m_put_textFunc==null){
                var fp = GetFunctionPointer(16);
                m_put_textFunc = (put_textFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_textFunc));
            } 
            
            return  m_put_textFunc(m_ptr, p);
        }
        delegate int put_textFunc(IntPtr self, IntPtr p);
        put_textFunc m_put_textFunc;

        public int addChild(IntPtr pChildElem, int lIndex, int lReserved)
        {
            if(m_addChildFunc==null){
                var fp = GetFunctionPointer(17);
                m_addChildFunc = (addChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(addChildFunc));
            } 
            
            return  m_addChildFunc(m_ptr, pChildElem, lIndex, lReserved);
        }
        delegate int addChildFunc(IntPtr self, IntPtr pChildElem, int lIndex, int lReserved);
        addChildFunc m_addChildFunc;

        public int removeChild(IntPtr pChildElem)
        {
            if(m_removeChildFunc==null){
                var fp = GetFunctionPointer(18);
                m_removeChildFunc = (removeChildFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(removeChildFunc));
            } 
            
            return  m_removeChildFunc(m_ptr, pChildElem);
        }
        delegate int removeChildFunc(IntPtr self, IntPtr pChildElem);
        removeChildFunc m_removeChildFunc;

    }
}
