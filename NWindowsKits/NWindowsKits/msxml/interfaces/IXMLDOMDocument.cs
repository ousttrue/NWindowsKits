// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/msxml.h:1468
    public class IXMLDOMDocument : IXMLDOMNode // 1
    {
        static Guid s_uuid = new Guid("2933bf81-7b36-11d2-b20e-00c04f983e60");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int get_doctype(ref IntPtr documentType)
        {
            if(m_get_doctypeFunc==null){
                var fp = GetFunctionPointer(43);
                m_get_doctypeFunc = (get_doctypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_doctypeFunc));
            } 
            
            return  m_get_doctypeFunc(m_ptr, ref documentType);
        }
        delegate int get_doctypeFunc(IntPtr self, ref IntPtr documentType);
        get_doctypeFunc m_get_doctypeFunc;

        public int get_implementation(ref IntPtr impl)
        {
            if(m_get_implementationFunc==null){
                var fp = GetFunctionPointer(44);
                m_get_implementationFunc = (get_implementationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_implementationFunc));
            } 
            
            return  m_get_implementationFunc(m_ptr, ref impl);
        }
        delegate int get_implementationFunc(IntPtr self, ref IntPtr impl);
        get_implementationFunc m_get_implementationFunc;

        public int get_documentElement(ref IntPtr DOMElement)
        {
            if(m_get_documentElementFunc==null){
                var fp = GetFunctionPointer(45);
                m_get_documentElementFunc = (get_documentElementFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_documentElementFunc));
            } 
            
            return  m_get_documentElementFunc(m_ptr, ref DOMElement);
        }
        delegate int get_documentElementFunc(IntPtr self, ref IntPtr DOMElement);
        get_documentElementFunc m_get_documentElementFunc;

        public int putref_documentElement(IntPtr DOMElement)
        {
            if(m_putref_documentElementFunc==null){
                var fp = GetFunctionPointer(46);
                m_putref_documentElementFunc = (putref_documentElementFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(putref_documentElementFunc));
            } 
            
            return  m_putref_documentElementFunc(m_ptr, DOMElement);
        }
        delegate int putref_documentElementFunc(IntPtr self, IntPtr DOMElement);
        putref_documentElementFunc m_putref_documentElementFunc;

        public int createElement(IntPtr tagName, ref IntPtr element)
        {
            if(m_createElementFunc==null){
                var fp = GetFunctionPointer(47);
                m_createElementFunc = (createElementFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createElementFunc));
            } 
            
            return  m_createElementFunc(m_ptr, tagName, ref element);
        }
        delegate int createElementFunc(IntPtr self, IntPtr tagName, ref IntPtr element);
        createElementFunc m_createElementFunc;

        public int createDocumentFragment(ref IntPtr docFrag)
        {
            if(m_createDocumentFragmentFunc==null){
                var fp = GetFunctionPointer(48);
                m_createDocumentFragmentFunc = (createDocumentFragmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createDocumentFragmentFunc));
            } 
            
            return  m_createDocumentFragmentFunc(m_ptr, ref docFrag);
        }
        delegate int createDocumentFragmentFunc(IntPtr self, ref IntPtr docFrag);
        createDocumentFragmentFunc m_createDocumentFragmentFunc;

        public int createTextNode(IntPtr data, ref IntPtr text)
        {
            if(m_createTextNodeFunc==null){
                var fp = GetFunctionPointer(49);
                m_createTextNodeFunc = (createTextNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createTextNodeFunc));
            } 
            
            return  m_createTextNodeFunc(m_ptr, data, ref text);
        }
        delegate int createTextNodeFunc(IntPtr self, IntPtr data, ref IntPtr text);
        createTextNodeFunc m_createTextNodeFunc;

        public int createComment(IntPtr data, ref IntPtr comment)
        {
            if(m_createCommentFunc==null){
                var fp = GetFunctionPointer(50);
                m_createCommentFunc = (createCommentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createCommentFunc));
            } 
            
            return  m_createCommentFunc(m_ptr, data, ref comment);
        }
        delegate int createCommentFunc(IntPtr self, IntPtr data, ref IntPtr comment);
        createCommentFunc m_createCommentFunc;

        public int createCDATASection(IntPtr data, ref IntPtr cdata)
        {
            if(m_createCDATASectionFunc==null){
                var fp = GetFunctionPointer(51);
                m_createCDATASectionFunc = (createCDATASectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createCDATASectionFunc));
            } 
            
            return  m_createCDATASectionFunc(m_ptr, data, ref cdata);
        }
        delegate int createCDATASectionFunc(IntPtr self, IntPtr data, ref IntPtr cdata);
        createCDATASectionFunc m_createCDATASectionFunc;

        public int createProcessingInstruction(IntPtr target, IntPtr data, ref IntPtr pi)
        {
            if(m_createProcessingInstructionFunc==null){
                var fp = GetFunctionPointer(52);
                m_createProcessingInstructionFunc = (createProcessingInstructionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createProcessingInstructionFunc));
            } 
            
            return  m_createProcessingInstructionFunc(m_ptr, target, data, ref pi);
        }
        delegate int createProcessingInstructionFunc(IntPtr self, IntPtr target, IntPtr data, ref IntPtr pi);
        createProcessingInstructionFunc m_createProcessingInstructionFunc;

        public int createAttribute(IntPtr name, ref IntPtr attribute)
        {
            if(m_createAttributeFunc==null){
                var fp = GetFunctionPointer(53);
                m_createAttributeFunc = (createAttributeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createAttributeFunc));
            } 
            
            return  m_createAttributeFunc(m_ptr, name, ref attribute);
        }
        delegate int createAttributeFunc(IntPtr self, IntPtr name, ref IntPtr attribute);
        createAttributeFunc m_createAttributeFunc;

        public int createEntityReference(IntPtr name, ref IntPtr entityRef)
        {
            if(m_createEntityReferenceFunc==null){
                var fp = GetFunctionPointer(54);
                m_createEntityReferenceFunc = (createEntityReferenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createEntityReferenceFunc));
            } 
            
            return  m_createEntityReferenceFunc(m_ptr, name, ref entityRef);
        }
        delegate int createEntityReferenceFunc(IntPtr self, IntPtr name, ref IntPtr entityRef);
        createEntityReferenceFunc m_createEntityReferenceFunc;

        public int getElementsByTagName(IntPtr tagName, ref IntPtr resultList)
        {
            if(m_getElementsByTagNameFunc==null){
                var fp = GetFunctionPointer(55);
                m_getElementsByTagNameFunc = (getElementsByTagNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(getElementsByTagNameFunc));
            } 
            
            return  m_getElementsByTagNameFunc(m_ptr, tagName, ref resultList);
        }
        delegate int getElementsByTagNameFunc(IntPtr self, IntPtr tagName, ref IntPtr resultList);
        getElementsByTagNameFunc m_getElementsByTagNameFunc;

        public int createNode(VARIANT Type, IntPtr name, IntPtr namespaceURI, ref IntPtr node)
        {
            if(m_createNodeFunc==null){
                var fp = GetFunctionPointer(56);
                m_createNodeFunc = (createNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(createNodeFunc));
            } 
            
            return  m_createNodeFunc(m_ptr, Type, name, namespaceURI, ref node);
        }
        delegate int createNodeFunc(IntPtr self, VARIANT Type, IntPtr name, IntPtr namespaceURI, ref IntPtr node);
        createNodeFunc m_createNodeFunc;

        public int nodeFromID(IntPtr idString, ref IntPtr node)
        {
            if(m_nodeFromIDFunc==null){
                var fp = GetFunctionPointer(57);
                m_nodeFromIDFunc = (nodeFromIDFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(nodeFromIDFunc));
            } 
            
            return  m_nodeFromIDFunc(m_ptr, idString, ref node);
        }
        delegate int nodeFromIDFunc(IntPtr self, IntPtr idString, ref IntPtr node);
        nodeFromIDFunc m_nodeFromIDFunc;

        public int load(VARIANT xmlSource, ref short isSuccessful)
        {
            if(m_loadFunc==null){
                var fp = GetFunctionPointer(58);
                m_loadFunc = (loadFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(loadFunc));
            } 
            
            return  m_loadFunc(m_ptr, xmlSource, ref isSuccessful);
        }
        delegate int loadFunc(IntPtr self, VARIANT xmlSource, ref short isSuccessful);
        loadFunc m_loadFunc;

        public int get_readyState(ref int value)
        {
            if(m_get_readyStateFunc==null){
                var fp = GetFunctionPointer(59);
                m_get_readyStateFunc = (get_readyStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_readyStateFunc));
            } 
            
            return  m_get_readyStateFunc(m_ptr, ref value);
        }
        delegate int get_readyStateFunc(IntPtr self, ref int value);
        get_readyStateFunc m_get_readyStateFunc;

        public int get_parseError(ref IntPtr errorObj)
        {
            if(m_get_parseErrorFunc==null){
                var fp = GetFunctionPointer(60);
                m_get_parseErrorFunc = (get_parseErrorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_parseErrorFunc));
            } 
            
            return  m_get_parseErrorFunc(m_ptr, ref errorObj);
        }
        delegate int get_parseErrorFunc(IntPtr self, ref IntPtr errorObj);
        get_parseErrorFunc m_get_parseErrorFunc;

        public int get_url(ref IntPtr urlString)
        {
            if(m_get_urlFunc==null){
                var fp = GetFunctionPointer(61);
                m_get_urlFunc = (get_urlFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_urlFunc));
            } 
            
            return  m_get_urlFunc(m_ptr, ref urlString);
        }
        delegate int get_urlFunc(IntPtr self, ref IntPtr urlString);
        get_urlFunc m_get_urlFunc;

        public int get_async(ref short isAsync)
        {
            if(m_get_asyncFunc==null){
                var fp = GetFunctionPointer(62);
                m_get_asyncFunc = (get_asyncFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_asyncFunc));
            } 
            
            return  m_get_asyncFunc(m_ptr, ref isAsync);
        }
        delegate int get_asyncFunc(IntPtr self, ref short isAsync);
        get_asyncFunc m_get_asyncFunc;

        public int put_async(short isAsync)
        {
            if(m_put_asyncFunc==null){
                var fp = GetFunctionPointer(63);
                m_put_asyncFunc = (put_asyncFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_asyncFunc));
            } 
            
            return  m_put_asyncFunc(m_ptr, isAsync);
        }
        delegate int put_asyncFunc(IntPtr self, short isAsync);
        put_asyncFunc m_put_asyncFunc;

        public int abort()
        {
            if(m_abortFunc==null){
                var fp = GetFunctionPointer(64);
                m_abortFunc = (abortFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(abortFunc));
            } 
            
            return  m_abortFunc(m_ptr);
        }
        delegate int abortFunc(IntPtr self);
        abortFunc m_abortFunc;

        public int loadXML(IntPtr bstrXML, ref short isSuccessful)
        {
            if(m_loadXMLFunc==null){
                var fp = GetFunctionPointer(65);
                m_loadXMLFunc = (loadXMLFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(loadXMLFunc));
            } 
            
            return  m_loadXMLFunc(m_ptr, bstrXML, ref isSuccessful);
        }
        delegate int loadXMLFunc(IntPtr self, IntPtr bstrXML, ref short isSuccessful);
        loadXMLFunc m_loadXMLFunc;

        public int save(VARIANT destination)
        {
            if(m_saveFunc==null){
                var fp = GetFunctionPointer(66);
                m_saveFunc = (saveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(saveFunc));
            } 
            
            return  m_saveFunc(m_ptr, destination);
        }
        delegate int saveFunc(IntPtr self, VARIANT destination);
        saveFunc m_saveFunc;

        public int get_validateOnParse(ref short isValidating)
        {
            if(m_get_validateOnParseFunc==null){
                var fp = GetFunctionPointer(67);
                m_get_validateOnParseFunc = (get_validateOnParseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_validateOnParseFunc));
            } 
            
            return  m_get_validateOnParseFunc(m_ptr, ref isValidating);
        }
        delegate int get_validateOnParseFunc(IntPtr self, ref short isValidating);
        get_validateOnParseFunc m_get_validateOnParseFunc;

        public int put_validateOnParse(short isValidating)
        {
            if(m_put_validateOnParseFunc==null){
                var fp = GetFunctionPointer(68);
                m_put_validateOnParseFunc = (put_validateOnParseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_validateOnParseFunc));
            } 
            
            return  m_put_validateOnParseFunc(m_ptr, isValidating);
        }
        delegate int put_validateOnParseFunc(IntPtr self, short isValidating);
        put_validateOnParseFunc m_put_validateOnParseFunc;

        public int get_resolveExternals(ref short isResolving)
        {
            if(m_get_resolveExternalsFunc==null){
                var fp = GetFunctionPointer(69);
                m_get_resolveExternalsFunc = (get_resolveExternalsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_resolveExternalsFunc));
            } 
            
            return  m_get_resolveExternalsFunc(m_ptr, ref isResolving);
        }
        delegate int get_resolveExternalsFunc(IntPtr self, ref short isResolving);
        get_resolveExternalsFunc m_get_resolveExternalsFunc;

        public int put_resolveExternals(short isResolving)
        {
            if(m_put_resolveExternalsFunc==null){
                var fp = GetFunctionPointer(70);
                m_put_resolveExternalsFunc = (put_resolveExternalsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_resolveExternalsFunc));
            } 
            
            return  m_put_resolveExternalsFunc(m_ptr, isResolving);
        }
        delegate int put_resolveExternalsFunc(IntPtr self, short isResolving);
        put_resolveExternalsFunc m_put_resolveExternalsFunc;

        public int get_preserveWhiteSpace(ref short isPreserving)
        {
            if(m_get_preserveWhiteSpaceFunc==null){
                var fp = GetFunctionPointer(71);
                m_get_preserveWhiteSpaceFunc = (get_preserveWhiteSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_preserveWhiteSpaceFunc));
            } 
            
            return  m_get_preserveWhiteSpaceFunc(m_ptr, ref isPreserving);
        }
        delegate int get_preserveWhiteSpaceFunc(IntPtr self, ref short isPreserving);
        get_preserveWhiteSpaceFunc m_get_preserveWhiteSpaceFunc;

        public int put_preserveWhiteSpace(short isPreserving)
        {
            if(m_put_preserveWhiteSpaceFunc==null){
                var fp = GetFunctionPointer(72);
                m_put_preserveWhiteSpaceFunc = (put_preserveWhiteSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_preserveWhiteSpaceFunc));
            } 
            
            return  m_put_preserveWhiteSpaceFunc(m_ptr, isPreserving);
        }
        delegate int put_preserveWhiteSpaceFunc(IntPtr self, short isPreserving);
        put_preserveWhiteSpaceFunc m_put_preserveWhiteSpaceFunc;

        public int put_onreadystatechange(VARIANT readystatechangeSink)
        {
            if(m_put_onreadystatechangeFunc==null){
                var fp = GetFunctionPointer(73);
                m_put_onreadystatechangeFunc = (put_onreadystatechangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_onreadystatechangeFunc));
            } 
            
            return  m_put_onreadystatechangeFunc(m_ptr, readystatechangeSink);
        }
        delegate int put_onreadystatechangeFunc(IntPtr self, VARIANT readystatechangeSink);
        put_onreadystatechangeFunc m_put_onreadystatechangeFunc;

        public int put_ondataavailable(VARIANT ondataavailableSink)
        {
            if(m_put_ondataavailableFunc==null){
                var fp = GetFunctionPointer(74);
                m_put_ondataavailableFunc = (put_ondataavailableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_ondataavailableFunc));
            } 
            
            return  m_put_ondataavailableFunc(m_ptr, ondataavailableSink);
        }
        delegate int put_ondataavailableFunc(IntPtr self, VARIANT ondataavailableSink);
        put_ondataavailableFunc m_put_ondataavailableFunc;

        public int put_ontransformnode(VARIANT ontransformnodeSink)
        {
            if(m_put_ontransformnodeFunc==null){
                var fp = GetFunctionPointer(75);
                m_put_ontransformnodeFunc = (put_ontransformnodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_ontransformnodeFunc));
            } 
            
            return  m_put_ontransformnodeFunc(m_ptr, ontransformnodeSink);
        }
        delegate int put_ontransformnodeFunc(IntPtr self, VARIANT ontransformnodeSink);
        put_ontransformnodeFunc m_put_ontransformnodeFunc;

    }
}
