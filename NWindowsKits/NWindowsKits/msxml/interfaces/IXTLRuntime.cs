// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/msxml.h:7570
    public class IXTLRuntime : IXMLDOMNode // 1
    {
        static Guid s_uuid = new Guid("3efaa425-272f-11d2-836f-0000f87a7782");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int uniqueID(IntPtr pNode, ref int pID)
        {
            if(m_uniqueIDFunc==null){
                var fp = GetFunctionPointer(43);
                m_uniqueIDFunc = (uniqueIDFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(uniqueIDFunc));
            } 
            
            return  m_uniqueIDFunc(m_ptr, pNode, ref pID);
        }
        delegate int uniqueIDFunc(IntPtr self, IntPtr pNode, ref int pID);
        uniqueIDFunc m_uniqueIDFunc;

        public int depth(IntPtr pNode, ref int pDepth)
        {
            if(m_depthFunc==null){
                var fp = GetFunctionPointer(44);
                m_depthFunc = (depthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(depthFunc));
            } 
            
            return  m_depthFunc(m_ptr, pNode, ref pDepth);
        }
        delegate int depthFunc(IntPtr self, IntPtr pNode, ref int pDepth);
        depthFunc m_depthFunc;

        public int childNumber(IntPtr pNode, ref int pNumber)
        {
            if(m_childNumberFunc==null){
                var fp = GetFunctionPointer(45);
                m_childNumberFunc = (childNumberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(childNumberFunc));
            } 
            
            return  m_childNumberFunc(m_ptr, pNode, ref pNumber);
        }
        delegate int childNumberFunc(IntPtr self, IntPtr pNode, ref int pNumber);
        childNumberFunc m_childNumberFunc;

        public int ancestorChildNumber(IntPtr bstrNodeName, IntPtr pNode, ref int pNumber)
        {
            if(m_ancestorChildNumberFunc==null){
                var fp = GetFunctionPointer(46);
                m_ancestorChildNumberFunc = (ancestorChildNumberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ancestorChildNumberFunc));
            } 
            
            return  m_ancestorChildNumberFunc(m_ptr, bstrNodeName, pNode, ref pNumber);
        }
        delegate int ancestorChildNumberFunc(IntPtr self, IntPtr bstrNodeName, IntPtr pNode, ref int pNumber);
        ancestorChildNumberFunc m_ancestorChildNumberFunc;

        public int absoluteChildNumber(IntPtr pNode, ref int pNumber)
        {
            if(m_absoluteChildNumberFunc==null){
                var fp = GetFunctionPointer(47);
                m_absoluteChildNumberFunc = (absoluteChildNumberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(absoluteChildNumberFunc));
            } 
            
            return  m_absoluteChildNumberFunc(m_ptr, pNode, ref pNumber);
        }
        delegate int absoluteChildNumberFunc(IntPtr self, IntPtr pNode, ref int pNumber);
        absoluteChildNumberFunc m_absoluteChildNumberFunc;

        public int formatIndex(int lIndex, IntPtr bstrFormat, ref IntPtr pbstrFormattedString)
        {
            if(m_formatIndexFunc==null){
                var fp = GetFunctionPointer(48);
                m_formatIndexFunc = (formatIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(formatIndexFunc));
            } 
            
            return  m_formatIndexFunc(m_ptr, lIndex, bstrFormat, ref pbstrFormattedString);
        }
        delegate int formatIndexFunc(IntPtr self, int lIndex, IntPtr bstrFormat, ref IntPtr pbstrFormattedString);
        formatIndexFunc m_formatIndexFunc;

        public int formatNumber(double dblNumber, IntPtr bstrFormat, ref IntPtr pbstrFormattedString)
        {
            if(m_formatNumberFunc==null){
                var fp = GetFunctionPointer(49);
                m_formatNumberFunc = (formatNumberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(formatNumberFunc));
            } 
            
            return  m_formatNumberFunc(m_ptr, dblNumber, bstrFormat, ref pbstrFormattedString);
        }
        delegate int formatNumberFunc(IntPtr self, double dblNumber, IntPtr bstrFormat, ref IntPtr pbstrFormattedString);
        formatNumberFunc m_formatNumberFunc;

        public int formatDate(VARIANT varDate, IntPtr bstrFormat, VARIANT varDestLocale, ref IntPtr pbstrFormattedString)
        {
            if(m_formatDateFunc==null){
                var fp = GetFunctionPointer(50);
                m_formatDateFunc = (formatDateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(formatDateFunc));
            } 
            
            return  m_formatDateFunc(m_ptr, varDate, bstrFormat, varDestLocale, ref pbstrFormattedString);
        }
        delegate int formatDateFunc(IntPtr self, VARIANT varDate, IntPtr bstrFormat, VARIANT varDestLocale, ref IntPtr pbstrFormattedString);
        formatDateFunc m_formatDateFunc;

        public int formatTime(VARIANT varTime, IntPtr bstrFormat, VARIANT varDestLocale, ref IntPtr pbstrFormattedString)
        {
            if(m_formatTimeFunc==null){
                var fp = GetFunctionPointer(51);
                m_formatTimeFunc = (formatTimeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(formatTimeFunc));
            } 
            
            return  m_formatTimeFunc(m_ptr, varTime, bstrFormat, varDestLocale, ref pbstrFormattedString);
        }
        delegate int formatTimeFunc(IntPtr self, VARIANT varTime, IntPtr bstrFormat, VARIANT varDestLocale, ref IntPtr pbstrFormattedString);
        formatTimeFunc m_formatTimeFunc;

    }
}
