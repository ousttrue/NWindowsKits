// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/ObjIdl.h:8173
    public class IMallocSpy : IUnknown // 1
    {
        static Guid s_uuid = new Guid("0000001d-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public ulong PreAlloc(ulong cbRequest)
        {
            if(m_PreAllocFunc==null){
                var fp = GetFunctionPointer(3);
                m_PreAllocFunc = (PreAllocFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PreAllocFunc));
            } 
            
            return  m_PreAllocFunc(m_ptr, cbRequest);
        }
        delegate ulong PreAllocFunc(IntPtr self, ulong cbRequest);
        PreAllocFunc m_PreAllocFunc;

        public IntPtr PostAlloc(IntPtr pActual)
        {
            if(m_PostAllocFunc==null){
                var fp = GetFunctionPointer(4);
                m_PostAllocFunc = (PostAllocFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PostAllocFunc));
            } 
            
            return  m_PostAllocFunc(m_ptr, pActual);
        }
        delegate IntPtr PostAllocFunc(IntPtr self, IntPtr pActual);
        PostAllocFunc m_PostAllocFunc;

        public IntPtr PreFree(IntPtr pRequest, int fSpyed)
        {
            if(m_PreFreeFunc==null){
                var fp = GetFunctionPointer(5);
                m_PreFreeFunc = (PreFreeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PreFreeFunc));
            } 
            
            return  m_PreFreeFunc(m_ptr, pRequest, fSpyed);
        }
        delegate IntPtr PreFreeFunc(IntPtr self, IntPtr pRequest, int fSpyed);
        PreFreeFunc m_PreFreeFunc;

        public void PostFree(int fSpyed)
        {
            if(m_PostFreeFunc==null){
                var fp = GetFunctionPointer(6);
                m_PostFreeFunc = (PostFreeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PostFreeFunc));
            } 
            
             m_PostFreeFunc(m_ptr, fSpyed);
        }
        delegate void PostFreeFunc(IntPtr self, int fSpyed);
        PostFreeFunc m_PostFreeFunc;

        public ulong PreRealloc(IntPtr pRequest, ulong cbRequest, ref IntPtr ppNewRequest, int fSpyed)
        {
            if(m_PreReallocFunc==null){
                var fp = GetFunctionPointer(7);
                m_PreReallocFunc = (PreReallocFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PreReallocFunc));
            } 
            
            return  m_PreReallocFunc(m_ptr, pRequest, cbRequest, ref ppNewRequest, fSpyed);
        }
        delegate ulong PreReallocFunc(IntPtr self, IntPtr pRequest, ulong cbRequest, ref IntPtr ppNewRequest, int fSpyed);
        PreReallocFunc m_PreReallocFunc;

        public IntPtr PostRealloc(IntPtr pActual, int fSpyed)
        {
            if(m_PostReallocFunc==null){
                var fp = GetFunctionPointer(8);
                m_PostReallocFunc = (PostReallocFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PostReallocFunc));
            } 
            
            return  m_PostReallocFunc(m_ptr, pActual, fSpyed);
        }
        delegate IntPtr PostReallocFunc(IntPtr self, IntPtr pActual, int fSpyed);
        PostReallocFunc m_PostReallocFunc;

        public IntPtr PreGetSize(IntPtr pRequest, int fSpyed)
        {
            if(m_PreGetSizeFunc==null){
                var fp = GetFunctionPointer(9);
                m_PreGetSizeFunc = (PreGetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PreGetSizeFunc));
            } 
            
            return  m_PreGetSizeFunc(m_ptr, pRequest, fSpyed);
        }
        delegate IntPtr PreGetSizeFunc(IntPtr self, IntPtr pRequest, int fSpyed);
        PreGetSizeFunc m_PreGetSizeFunc;

        public ulong PostGetSize(ulong cbActual, int fSpyed)
        {
            if(m_PostGetSizeFunc==null){
                var fp = GetFunctionPointer(10);
                m_PostGetSizeFunc = (PostGetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PostGetSizeFunc));
            } 
            
            return  m_PostGetSizeFunc(m_ptr, cbActual, fSpyed);
        }
        delegate ulong PostGetSizeFunc(IntPtr self, ulong cbActual, int fSpyed);
        PostGetSizeFunc m_PostGetSizeFunc;

        public IntPtr PreDidAlloc(IntPtr pRequest, int fSpyed)
        {
            if(m_PreDidAllocFunc==null){
                var fp = GetFunctionPointer(11);
                m_PreDidAllocFunc = (PreDidAllocFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PreDidAllocFunc));
            } 
            
            return  m_PreDidAllocFunc(m_ptr, pRequest, fSpyed);
        }
        delegate IntPtr PreDidAllocFunc(IntPtr self, IntPtr pRequest, int fSpyed);
        PreDidAllocFunc m_PreDidAllocFunc;

        public int PostDidAlloc(IntPtr pRequest, int fSpyed, int fActual)
        {
            if(m_PostDidAllocFunc==null){
                var fp = GetFunctionPointer(12);
                m_PostDidAllocFunc = (PostDidAllocFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PostDidAllocFunc));
            } 
            
            return  m_PostDidAllocFunc(m_ptr, pRequest, fSpyed, fActual);
        }
        delegate int PostDidAllocFunc(IntPtr self, IntPtr pRequest, int fSpyed, int fActual);
        PostDidAllocFunc m_PostDidAllocFunc;

        public void PreHeapMinimize()
        {
            if(m_PreHeapMinimizeFunc==null){
                var fp = GetFunctionPointer(13);
                m_PreHeapMinimizeFunc = (PreHeapMinimizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PreHeapMinimizeFunc));
            } 
            
             m_PreHeapMinimizeFunc(m_ptr);
        }
        delegate void PreHeapMinimizeFunc(IntPtr self);
        PreHeapMinimizeFunc m_PreHeapMinimizeFunc;

        public void PostHeapMinimize()
        {
            if(m_PostHeapMinimizeFunc==null){
                var fp = GetFunctionPointer(14);
                m_PostHeapMinimizeFunc = (PostHeapMinimizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PostHeapMinimizeFunc));
            } 
            
             m_PostHeapMinimizeFunc(m_ptr);
        }
        delegate void PostHeapMinimizeFunc(IntPtr self);
        PostHeapMinimizeFunc m_PostHeapMinimizeFunc;

    }
}
