// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/ObjIdl.h:8852
    public class IRunnableObject : IUnknown
    {
        static Guid s_uuid = new Guid("00000126-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetRunningClass(IntPtr lpClsid)
        {
            if(m_GetRunningClassFunc==null){
                var fp = GetFunctionPointer(3);
                m_GetRunningClassFunc = (GetRunningClassFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRunningClassFunc));
            } 
            return  m_GetRunningClassFunc(m_ptr, lpClsid);
        }
        delegate int GetRunningClassFunc(IntPtr self, IntPtr lpClsid);
        GetRunningClassFunc m_GetRunningClassFunc;

        public int Run(IntPtr pbc)
        {
            if(m_RunFunc==null){
                var fp = GetFunctionPointer(4);
                m_RunFunc = (RunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RunFunc));
            } 
            return  m_RunFunc(m_ptr, pbc);
        }
        delegate int RunFunc(IntPtr self, IntPtr pbc);
        RunFunc m_RunFunc;

        public int IsRunning()
        {
            if(m_IsRunningFunc==null){
                var fp = GetFunctionPointer(5);
                m_IsRunningFunc = (IsRunningFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsRunningFunc));
            } 
            return  m_IsRunningFunc(m_ptr);
        }
        delegate int IsRunningFunc(IntPtr self);
        IsRunningFunc m_IsRunningFunc;

        public int LockRunning(int fLock, int fLastUnlockCloses)
        {
            if(m_LockRunningFunc==null){
                var fp = GetFunctionPointer(6);
                m_LockRunningFunc = (LockRunningFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LockRunningFunc));
            } 
            return  m_LockRunningFunc(m_ptr, fLock, fLastUnlockCloses);
        }
        delegate int LockRunningFunc(IntPtr self, int fLock, int fLastUnlockCloses);
        LockRunningFunc m_LockRunningFunc;

        public int SetContainedObject(int fContained)
        {
            if(m_SetContainedObjectFunc==null){
                var fp = GetFunctionPointer(7);
                m_SetContainedObjectFunc = (SetContainedObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetContainedObjectFunc));
            } 
            return  m_SetContainedObjectFunc(m_ptr, fContained);
        }
        delegate int SetContainedObjectFunc(IntPtr self, int fContained);
        SetContainedObjectFunc m_SetContainedObjectFunc;

    }
}
