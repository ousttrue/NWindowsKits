// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/ObjIdl.h:9377
    public class IMoniker : IPersistStream
    {
        static Guid s_uuid = new Guid("0000000f-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int BindToObject(IntPtr pbc, IntPtr pmkToLeft, ref Guid riidResult, ref IntPtr ppvResult)
        {
            if(m_BindToObjectFunc==null){
                var fp = GetFunctionPointer(8);
                m_BindToObjectFunc = (BindToObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindToObjectFunc));
            } 
            return  m_BindToObjectFunc(m_ptr, pbc, pmkToLeft, ref riidResult, ref ppvResult);
        }
        delegate int BindToObjectFunc(IntPtr self, IntPtr pbc, IntPtr pmkToLeft, ref Guid riidResult, ref IntPtr ppvResult);
        BindToObjectFunc m_BindToObjectFunc;

        public int BindToStorage(IntPtr pbc, IntPtr pmkToLeft, ref Guid riid, ref IntPtr ppvObj)
        {
            if(m_BindToStorageFunc==null){
                var fp = GetFunctionPointer(9);
                m_BindToStorageFunc = (BindToStorageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindToStorageFunc));
            } 
            return  m_BindToStorageFunc(m_ptr, pbc, pmkToLeft, ref riid, ref ppvObj);
        }
        delegate int BindToStorageFunc(IntPtr self, IntPtr pbc, IntPtr pmkToLeft, ref Guid riid, ref IntPtr ppvObj);
        BindToStorageFunc m_BindToStorageFunc;

        public int Reduce(IntPtr pbc, uint dwReduceHowFar, ref IntPtr ppmkToLeft, ref IntPtr ppmkReduced)
        {
            if(m_ReduceFunc==null){
                var fp = GetFunctionPointer(10);
                m_ReduceFunc = (ReduceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReduceFunc));
            } 
            return  m_ReduceFunc(m_ptr, pbc, dwReduceHowFar, ref ppmkToLeft, ref ppmkReduced);
        }
        delegate int ReduceFunc(IntPtr self, IntPtr pbc, uint dwReduceHowFar, ref IntPtr ppmkToLeft, ref IntPtr ppmkReduced);
        ReduceFunc m_ReduceFunc;

        public int ComposeWith(IntPtr pmkRight, int fOnlyIfNotGeneric, ref IntPtr ppmkComposite)
        {
            if(m_ComposeWithFunc==null){
                var fp = GetFunctionPointer(11);
                m_ComposeWithFunc = (ComposeWithFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComposeWithFunc));
            } 
            return  m_ComposeWithFunc(m_ptr, pmkRight, fOnlyIfNotGeneric, ref ppmkComposite);
        }
        delegate int ComposeWithFunc(IntPtr self, IntPtr pmkRight, int fOnlyIfNotGeneric, ref IntPtr ppmkComposite);
        ComposeWithFunc m_ComposeWithFunc;

        public int Enum(int fForward, ref IntPtr ppenumMoniker)
        {
            if(m_EnumFunc==null){
                var fp = GetFunctionPointer(12);
                m_EnumFunc = (EnumFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumFunc));
            } 
            return  m_EnumFunc(m_ptr, fForward, ref ppenumMoniker);
        }
        delegate int EnumFunc(IntPtr self, int fForward, ref IntPtr ppenumMoniker);
        EnumFunc m_EnumFunc;

        public int IsEqual(IntPtr pmkOtherMoniker)
        {
            if(m_IsEqualFunc==null){
                var fp = GetFunctionPointer(13);
                m_IsEqualFunc = (IsEqualFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsEqualFunc));
            } 
            return  m_IsEqualFunc(m_ptr, pmkOtherMoniker);
        }
        delegate int IsEqualFunc(IntPtr self, IntPtr pmkOtherMoniker);
        IsEqualFunc m_IsEqualFunc;

        public int Hash(ref uint pdwHash)
        {
            if(m_HashFunc==null){
                var fp = GetFunctionPointer(14);
                m_HashFunc = (HashFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HashFunc));
            } 
            return  m_HashFunc(m_ptr, ref pdwHash);
        }
        delegate int HashFunc(IntPtr self, ref uint pdwHash);
        HashFunc m_HashFunc;

        public int IsRunning(IntPtr pbc, IntPtr pmkToLeft, IntPtr pmkNewlyRunning)
        {
            if(m_IsRunningFunc==null){
                var fp = GetFunctionPointer(15);
                m_IsRunningFunc = (IsRunningFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsRunningFunc));
            } 
            return  m_IsRunningFunc(m_ptr, pbc, pmkToLeft, pmkNewlyRunning);
        }
        delegate int IsRunningFunc(IntPtr self, IntPtr pbc, IntPtr pmkToLeft, IntPtr pmkNewlyRunning);
        IsRunningFunc m_IsRunningFunc;

        public int GetTimeOfLastChange(IntPtr pbc, IntPtr pmkToLeft, ref FILETIME pFileTime)
        {
            if(m_GetTimeOfLastChangeFunc==null){
                var fp = GetFunctionPointer(16);
                m_GetTimeOfLastChangeFunc = (GetTimeOfLastChangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTimeOfLastChangeFunc));
            } 
            return  m_GetTimeOfLastChangeFunc(m_ptr, pbc, pmkToLeft, ref pFileTime);
        }
        delegate int GetTimeOfLastChangeFunc(IntPtr self, IntPtr pbc, IntPtr pmkToLeft, ref FILETIME pFileTime);
        GetTimeOfLastChangeFunc m_GetTimeOfLastChangeFunc;

        public int Inverse(ref IntPtr ppmk)
        {
            if(m_InverseFunc==null){
                var fp = GetFunctionPointer(17);
                m_InverseFunc = (InverseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InverseFunc));
            } 
            return  m_InverseFunc(m_ptr, ref ppmk);
        }
        delegate int InverseFunc(IntPtr self, ref IntPtr ppmk);
        InverseFunc m_InverseFunc;

        public int CommonPrefixWith(IntPtr pmkOther, ref IntPtr ppmkPrefix)
        {
            if(m_CommonPrefixWithFunc==null){
                var fp = GetFunctionPointer(18);
                m_CommonPrefixWithFunc = (CommonPrefixWithFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CommonPrefixWithFunc));
            } 
            return  m_CommonPrefixWithFunc(m_ptr, pmkOther, ref ppmkPrefix);
        }
        delegate int CommonPrefixWithFunc(IntPtr self, IntPtr pmkOther, ref IntPtr ppmkPrefix);
        CommonPrefixWithFunc m_CommonPrefixWithFunc;

        public int RelativePathTo(IntPtr pmkOther, ref IntPtr ppmkRelPath)
        {
            if(m_RelativePathToFunc==null){
                var fp = GetFunctionPointer(19);
                m_RelativePathToFunc = (RelativePathToFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RelativePathToFunc));
            } 
            return  m_RelativePathToFunc(m_ptr, pmkOther, ref ppmkRelPath);
        }
        delegate int RelativePathToFunc(IntPtr self, IntPtr pmkOther, ref IntPtr ppmkRelPath);
        RelativePathToFunc m_RelativePathToFunc;

        public int GetDisplayName(IntPtr pbc, IntPtr pmkToLeft, ref IntPtr ppszDisplayName)
        {
            if(m_GetDisplayNameFunc==null){
                var fp = GetFunctionPointer(20);
                m_GetDisplayNameFunc = (GetDisplayNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplayNameFunc));
            } 
            return  m_GetDisplayNameFunc(m_ptr, pbc, pmkToLeft, ref ppszDisplayName);
        }
        delegate int GetDisplayNameFunc(IntPtr self, IntPtr pbc, IntPtr pmkToLeft, ref IntPtr ppszDisplayName);
        GetDisplayNameFunc m_GetDisplayNameFunc;

        public int ParseDisplayName(IntPtr pbc, IntPtr pmkToLeft, IntPtr pszDisplayName, IntPtr pchEaten, ref IntPtr ppmkOut)
        {
            if(m_ParseDisplayNameFunc==null){
                var fp = GetFunctionPointer(21);
                m_ParseDisplayNameFunc = (ParseDisplayNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ParseDisplayNameFunc));
            } 
            return  m_ParseDisplayNameFunc(m_ptr, pbc, pmkToLeft, pszDisplayName, pchEaten, ref ppmkOut);
        }
        delegate int ParseDisplayNameFunc(IntPtr self, IntPtr pbc, IntPtr pmkToLeft, IntPtr pszDisplayName, IntPtr pchEaten, ref IntPtr ppmkOut);
        ParseDisplayNameFunc m_ParseDisplayNameFunc;

        public int IsSystemMoniker(ref uint pdwMksys)
        {
            if(m_IsSystemMonikerFunc==null){
                var fp = GetFunctionPointer(22);
                m_IsSystemMonikerFunc = (IsSystemMonikerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSystemMonikerFunc));
            } 
            return  m_IsSystemMonikerFunc(m_ptr, ref pdwMksys);
        }
        delegate int IsSystemMonikerFunc(IntPtr self, ref uint pdwMksys);
        IsSystemMonikerFunc m_IsSystemMonikerFunc;

    }
}
