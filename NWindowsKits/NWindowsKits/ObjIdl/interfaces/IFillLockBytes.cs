// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/ObjIdl.h:12855
    public class IFillLockBytes : IUnknown // 1
    {
        static Guid s_uuid = new Guid("99caf010-415e-11cf-8814-00aa00b569f5");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int FillAppend(IntPtr pv, uint cb, IntPtr pcbWritten)
        {
            if(m_FillAppendFunc==null){
                var fp = GetFunctionPointer(3);
                m_FillAppendFunc = (FillAppendFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillAppendFunc));
            } 
            return  m_FillAppendFunc(m_ptr, pv, cb, pcbWritten);
        }
        delegate int FillAppendFunc(IntPtr self, IntPtr pv, uint cb, IntPtr pcbWritten);
        FillAppendFunc m_FillAppendFunc;

        public int FillAt(ULARGE_INTEGER ulOffset, IntPtr pv, uint cb, IntPtr pcbWritten)
        {
            if(m_FillAtFunc==null){
                var fp = GetFunctionPointer(4);
                m_FillAtFunc = (FillAtFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillAtFunc));
            } 
            return  m_FillAtFunc(m_ptr, ulOffset, pv, cb, pcbWritten);
        }
        delegate int FillAtFunc(IntPtr self, ULARGE_INTEGER ulOffset, IntPtr pv, uint cb, IntPtr pcbWritten);
        FillAtFunc m_FillAtFunc;

        public int SetFillSize(ULARGE_INTEGER ulSize)
        {
            if(m_SetFillSizeFunc==null){
                var fp = GetFunctionPointer(5);
                m_SetFillSizeFunc = (SetFillSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFillSizeFunc));
            } 
            return  m_SetFillSizeFunc(m_ptr, ulSize);
        }
        delegate int SetFillSizeFunc(IntPtr self, ULARGE_INTEGER ulSize);
        SetFillSizeFunc m_SetFillSizeFunc;

        public int Terminate(int bCanceled)
        {
            if(m_TerminateFunc==null){
                var fp = GetFunctionPointer(6);
                m_TerminateFunc = (TerminateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TerminateFunc));
            } 
            return  m_TerminateFunc(m_ptr, bCanceled);
        }
        delegate int TerminateFunc(IntPtr self, int bCanceled);
        TerminateFunc m_TerminateFunc;

    }
}
