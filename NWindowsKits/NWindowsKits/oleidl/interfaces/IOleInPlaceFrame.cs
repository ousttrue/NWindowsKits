// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/oleidl.h:2342
    public class IOleInPlaceFrame : IOleInPlaceUIWindow
    {
        static Guid s_uuid = new Guid("00000116-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int InsertMenus(HMENU hmenuShared, ref LPOLEMENUGROUPWIDTHS lpMenuWidths)
        {
            if(m_InsertMenusFunc==null){
                var fp = GetFunctionPointer(9);
                m_InsertMenusFunc = (InsertMenusFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InsertMenusFunc));
            } 
            return  m_InsertMenusFunc(m_ptr, hmenuShared, ref lpMenuWidths);
        }
        delegate int InsertMenusFunc(IntPtr self, HMENU hmenuShared, ref LPOLEMENUGROUPWIDTHS lpMenuWidths);
        InsertMenusFunc m_InsertMenusFunc;

        public int SetMenu(HMENU hmenuShared, IntPtr holemenu, HWND hwndActiveObject)
        {
            if(m_SetMenuFunc==null){
                var fp = GetFunctionPointer(10);
                m_SetMenuFunc = (SetMenuFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMenuFunc));
            } 
            return  m_SetMenuFunc(m_ptr, hmenuShared, holemenu, hwndActiveObject);
        }
        delegate int SetMenuFunc(IntPtr self, HMENU hmenuShared, IntPtr holemenu, HWND hwndActiveObject);
        SetMenuFunc m_SetMenuFunc;

        public int RemoveMenus(HMENU hmenuShared)
        {
            if(m_RemoveMenusFunc==null){
                var fp = GetFunctionPointer(11);
                m_RemoveMenusFunc = (RemoveMenusFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RemoveMenusFunc));
            } 
            return  m_RemoveMenusFunc(m_ptr, hmenuShared);
        }
        delegate int RemoveMenusFunc(IntPtr self, HMENU hmenuShared);
        RemoveMenusFunc m_RemoveMenusFunc;

        public int SetStatusText(IntPtr pszStatusText)
        {
            if(m_SetStatusTextFunc==null){
                var fp = GetFunctionPointer(12);
                m_SetStatusTextFunc = (SetStatusTextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetStatusTextFunc));
            } 
            return  m_SetStatusTextFunc(m_ptr, pszStatusText);
        }
        delegate int SetStatusTextFunc(IntPtr self, IntPtr pszStatusText);
        SetStatusTextFunc m_SetStatusTextFunc;

        public int EnableModeless(int fEnable)
        {
            if(m_EnableModelessFunc==null){
                var fp = GetFunctionPointer(13);
                m_EnableModelessFunc = (EnableModelessFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnableModelessFunc));
            } 
            return  m_EnableModelessFunc(m_ptr, fEnable);
        }
        delegate int EnableModelessFunc(IntPtr self, int fEnable);
        EnableModelessFunc m_EnableModelessFunc;

        public int TranslateAcceleratorA(ref MSG lpmsg, ushort wID)
        {
            if(m_TranslateAcceleratorAFunc==null){
                var fp = GetFunctionPointer(14);
                m_TranslateAcceleratorAFunc = (TranslateAcceleratorAFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TranslateAcceleratorAFunc));
            } 
            return  m_TranslateAcceleratorAFunc(m_ptr, ref lpmsg, wID);
        }
        delegate int TranslateAcceleratorAFunc(IntPtr self, ref MSG lpmsg, ushort wID);
        TranslateAcceleratorAFunc m_TranslateAcceleratorAFunc;

    }
}
