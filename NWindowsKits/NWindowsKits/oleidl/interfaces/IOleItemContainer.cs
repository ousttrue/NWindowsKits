// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/oleidl.h:1869
    public class IOleItemContainer : IOleContainer // 1
    {
        static Guid s_uuid = new Guid("0000011c-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetObjectA(IntPtr pszItem, uint dwSpeedNeeded, IntPtr pbc, ref Guid riid, ref IntPtr ppvObject)
        {
            if(m_GetObjectAFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetObjectAFunc = (GetObjectAFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetObjectAFunc));
            } 
            return  m_GetObjectAFunc(m_ptr, pszItem, dwSpeedNeeded, pbc, ref riid, ref ppvObject);
        }
        delegate int GetObjectAFunc(IntPtr self, IntPtr pszItem, uint dwSpeedNeeded, IntPtr pbc, ref Guid riid, ref IntPtr ppvObject);
        GetObjectAFunc m_GetObjectAFunc;

        public int GetObjectStorage(IntPtr pszItem, IntPtr pbc, ref Guid riid, ref IntPtr ppvStorage)
        {
            if(m_GetObjectStorageFunc==null){
                var fp = GetFunctionPointer(7);
                m_GetObjectStorageFunc = (GetObjectStorageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetObjectStorageFunc));
            } 
            return  m_GetObjectStorageFunc(m_ptr, pszItem, pbc, ref riid, ref ppvStorage);
        }
        delegate int GetObjectStorageFunc(IntPtr self, IntPtr pszItem, IntPtr pbc, ref Guid riid, ref IntPtr ppvStorage);
        GetObjectStorageFunc m_GetObjectStorageFunc;

        public int IsRunning(IntPtr pszItem)
        {
            if(m_IsRunningFunc==null){
                var fp = GetFunctionPointer(8);
                m_IsRunningFunc = (IsRunningFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsRunningFunc));
            } 
            return  m_IsRunningFunc(m_ptr, pszItem);
        }
        delegate int IsRunningFunc(IntPtr self, IntPtr pszItem);
        IsRunningFunc m_IsRunningFunc;

    }
}
