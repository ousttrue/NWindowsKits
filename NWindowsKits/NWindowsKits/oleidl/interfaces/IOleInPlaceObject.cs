// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/oleidl.h:2527
    public class IOleInPlaceObject : IOleWindow
    {
        static Guid s_uuid = new Guid("00000113-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int InPlaceDeactivate()
        {
            if(m_InPlaceDeactivateFunc==null){
                var fp = GetFunctionPointer(5);
                m_InPlaceDeactivateFunc = (InPlaceDeactivateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InPlaceDeactivateFunc));
            } 
            return  m_InPlaceDeactivateFunc(m_ptr);
        }
        delegate int InPlaceDeactivateFunc(IntPtr self);
        InPlaceDeactivateFunc m_InPlaceDeactivateFunc;

        public int UIDeactivate()
        {
            if(m_UIDeactivateFunc==null){
                var fp = GetFunctionPointer(6);
                m_UIDeactivateFunc = (UIDeactivateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UIDeactivateFunc));
            } 
            return  m_UIDeactivateFunc(m_ptr);
        }
        delegate int UIDeactivateFunc(IntPtr self);
        UIDeactivateFunc m_UIDeactivateFunc;

        public int SetObjectRects(ref RECT lprcPosRect, ref RECT lprcClipRect)
        {
            if(m_SetObjectRectsFunc==null){
                var fp = GetFunctionPointer(7);
                m_SetObjectRectsFunc = (SetObjectRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetObjectRectsFunc));
            } 
            return  m_SetObjectRectsFunc(m_ptr, ref lprcPosRect, ref lprcClipRect);
        }
        delegate int SetObjectRectsFunc(IntPtr self, ref RECT lprcPosRect, ref RECT lprcClipRect);
        SetObjectRectsFunc m_SetObjectRectsFunc;

        public int ReactivateAndUndo()
        {
            if(m_ReactivateAndUndoFunc==null){
                var fp = GetFunctionPointer(8);
                m_ReactivateAndUndoFunc = (ReactivateAndUndoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReactivateAndUndoFunc));
            } 
            return  m_ReactivateAndUndoFunc(m_ptr);
        }
        delegate int ReactivateAndUndoFunc(IntPtr self);
        ReactivateAndUndoFunc m_ReactivateAndUndoFunc;

    }
}
