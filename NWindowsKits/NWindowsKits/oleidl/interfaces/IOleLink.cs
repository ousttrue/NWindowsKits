// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/oleidl.h:1669
    public class IOleLink : IUnknown // 1
    {
        static Guid s_uuid = new Guid("0000011d-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int SetUpdateOptions(uint dwUpdateOpt)
        {
            if(m_SetUpdateOptionsFunc==null){
                var fp = GetFunctionPointer(3);
                m_SetUpdateOptionsFunc = (SetUpdateOptionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetUpdateOptionsFunc));
            } 
            
            return  m_SetUpdateOptionsFunc(m_ptr, dwUpdateOpt);
        }
        delegate int SetUpdateOptionsFunc(IntPtr self, uint dwUpdateOpt);
        SetUpdateOptionsFunc m_SetUpdateOptionsFunc;

        public int GetUpdateOptions(ref uint pdwUpdateOpt)
        {
            if(m_GetUpdateOptionsFunc==null){
                var fp = GetFunctionPointer(4);
                m_GetUpdateOptionsFunc = (GetUpdateOptionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetUpdateOptionsFunc));
            } 
            
            return  m_GetUpdateOptionsFunc(m_ptr, ref pdwUpdateOpt);
        }
        delegate int GetUpdateOptionsFunc(IntPtr self, ref uint pdwUpdateOpt);
        GetUpdateOptionsFunc m_GetUpdateOptionsFunc;

        public int SetSourceMoniker(IntPtr pmk, ref Guid rclsid)
        {
            if(m_SetSourceMonikerFunc==null){
                var fp = GetFunctionPointer(5);
                m_SetSourceMonikerFunc = (SetSourceMonikerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSourceMonikerFunc));
            } 
            
            return  m_SetSourceMonikerFunc(m_ptr, pmk, ref rclsid);
        }
        delegate int SetSourceMonikerFunc(IntPtr self, IntPtr pmk, ref Guid rclsid);
        SetSourceMonikerFunc m_SetSourceMonikerFunc;

        public int GetSourceMoniker(ref IntPtr ppmk)
        {
            if(m_GetSourceMonikerFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetSourceMonikerFunc = (GetSourceMonikerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceMonikerFunc));
            } 
            
            return  m_GetSourceMonikerFunc(m_ptr, ref ppmk);
        }
        delegate int GetSourceMonikerFunc(IntPtr self, ref IntPtr ppmk);
        GetSourceMonikerFunc m_GetSourceMonikerFunc;

        public int SetSourceDisplayName(IntPtr pszStatusText)
        {
            if(m_SetSourceDisplayNameFunc==null){
                var fp = GetFunctionPointer(7);
                m_SetSourceDisplayNameFunc = (SetSourceDisplayNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSourceDisplayNameFunc));
            } 
            
            return  m_SetSourceDisplayNameFunc(m_ptr, pszStatusText);
        }
        delegate int SetSourceDisplayNameFunc(IntPtr self, IntPtr pszStatusText);
        SetSourceDisplayNameFunc m_SetSourceDisplayNameFunc;

        public int GetSourceDisplayName(ref IntPtr ppszDisplayName)
        {
            if(m_GetSourceDisplayNameFunc==null){
                var fp = GetFunctionPointer(8);
                m_GetSourceDisplayNameFunc = (GetSourceDisplayNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceDisplayNameFunc));
            } 
            
            return  m_GetSourceDisplayNameFunc(m_ptr, ref ppszDisplayName);
        }
        delegate int GetSourceDisplayNameFunc(IntPtr self, ref IntPtr ppszDisplayName);
        GetSourceDisplayNameFunc m_GetSourceDisplayNameFunc;

        public int BindToSource(uint bindflags, IntPtr pbc)
        {
            if(m_BindToSourceFunc==null){
                var fp = GetFunctionPointer(9);
                m_BindToSourceFunc = (BindToSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindToSourceFunc));
            } 
            
            return  m_BindToSourceFunc(m_ptr, bindflags, pbc);
        }
        delegate int BindToSourceFunc(IntPtr self, uint bindflags, IntPtr pbc);
        BindToSourceFunc m_BindToSourceFunc;

        public int BindIfRunning()
        {
            if(m_BindIfRunningFunc==null){
                var fp = GetFunctionPointer(10);
                m_BindIfRunningFunc = (BindIfRunningFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindIfRunningFunc));
            } 
            
            return  m_BindIfRunningFunc(m_ptr);
        }
        delegate int BindIfRunningFunc(IntPtr self);
        BindIfRunningFunc m_BindIfRunningFunc;

        public int GetBoundSource(ref IntPtr ppunk)
        {
            if(m_GetBoundSourceFunc==null){
                var fp = GetFunctionPointer(11);
                m_GetBoundSourceFunc = (GetBoundSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBoundSourceFunc));
            } 
            
            return  m_GetBoundSourceFunc(m_ptr, ref ppunk);
        }
        delegate int GetBoundSourceFunc(IntPtr self, ref IntPtr ppunk);
        GetBoundSourceFunc m_GetBoundSourceFunc;

        public int UnbindSource()
        {
            if(m_UnbindSourceFunc==null){
                var fp = GetFunctionPointer(12);
                m_UnbindSourceFunc = (UnbindSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnbindSourceFunc));
            } 
            
            return  m_UnbindSourceFunc(m_ptr);
        }
        delegate int UnbindSourceFunc(IntPtr self);
        UnbindSourceFunc m_UnbindSourceFunc;

        public int Update(IntPtr pbc)
        {
            if(m_UpdateFunc==null){
                var fp = GetFunctionPointer(13);
                m_UpdateFunc = (UpdateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateFunc));
            } 
            
            return  m_UpdateFunc(m_ptr, pbc);
        }
        delegate int UpdateFunc(IntPtr self, IntPtr pbc);
        UpdateFunc m_UpdateFunc;

    }
}
