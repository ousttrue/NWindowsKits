// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OCIdl.h:2907
    public class IFont : IUnknown // 3
    {
        static Guid s_uuid = new Guid("bef6e002-a874-101a-8bba-00aa00300cab");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int get_Name(ref IntPtr pName)
        {
            if(m_get_NameFunc==null){
                var fp = GetFunctionPointer(3);
                m_get_NameFunc = (get_NameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_NameFunc));
            } 
            
            return  m_get_NameFunc(m_ptr, ref pName);
        }
        delegate int get_NameFunc(IntPtr self, ref IntPtr pName);
        get_NameFunc m_get_NameFunc;

        public int put_Name(IntPtr name)
        {
            if(m_put_NameFunc==null){
                var fp = GetFunctionPointer(4);
                m_put_NameFunc = (put_NameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_NameFunc));
            } 
            
            return  m_put_NameFunc(m_ptr, name);
        }
        delegate int put_NameFunc(IntPtr self, IntPtr name);
        put_NameFunc m_put_NameFunc;

        public int get_Size(ref CY pSize)
        {
            if(m_get_SizeFunc==null){
                var fp = GetFunctionPointer(5);
                m_get_SizeFunc = (get_SizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_SizeFunc));
            } 
            
            return  m_get_SizeFunc(m_ptr, ref pSize);
        }
        delegate int get_SizeFunc(IntPtr self, ref CY pSize);
        get_SizeFunc m_get_SizeFunc;

        public int put_Size(CY size)
        {
            if(m_put_SizeFunc==null){
                var fp = GetFunctionPointer(6);
                m_put_SizeFunc = (put_SizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_SizeFunc));
            } 
            
            return  m_put_SizeFunc(m_ptr, size);
        }
        delegate int put_SizeFunc(IntPtr self, CY size);
        put_SizeFunc m_put_SizeFunc;

        public int get_Bold(ref int pBold)
        {
            if(m_get_BoldFunc==null){
                var fp = GetFunctionPointer(7);
                m_get_BoldFunc = (get_BoldFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_BoldFunc));
            } 
            
            return  m_get_BoldFunc(m_ptr, ref pBold);
        }
        delegate int get_BoldFunc(IntPtr self, ref int pBold);
        get_BoldFunc m_get_BoldFunc;

        public int put_Bold(int bold)
        {
            if(m_put_BoldFunc==null){
                var fp = GetFunctionPointer(8);
                m_put_BoldFunc = (put_BoldFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_BoldFunc));
            } 
            
            return  m_put_BoldFunc(m_ptr, bold);
        }
        delegate int put_BoldFunc(IntPtr self, int bold);
        put_BoldFunc m_put_BoldFunc;

        public int get_Italic(ref int pItalic)
        {
            if(m_get_ItalicFunc==null){
                var fp = GetFunctionPointer(9);
                m_get_ItalicFunc = (get_ItalicFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_ItalicFunc));
            } 
            
            return  m_get_ItalicFunc(m_ptr, ref pItalic);
        }
        delegate int get_ItalicFunc(IntPtr self, ref int pItalic);
        get_ItalicFunc m_get_ItalicFunc;

        public int put_Italic(int italic)
        {
            if(m_put_ItalicFunc==null){
                var fp = GetFunctionPointer(10);
                m_put_ItalicFunc = (put_ItalicFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_ItalicFunc));
            } 
            
            return  m_put_ItalicFunc(m_ptr, italic);
        }
        delegate int put_ItalicFunc(IntPtr self, int italic);
        put_ItalicFunc m_put_ItalicFunc;

        public int get_Underline(ref int pUnderline)
        {
            if(m_get_UnderlineFunc==null){
                var fp = GetFunctionPointer(11);
                m_get_UnderlineFunc = (get_UnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_UnderlineFunc));
            } 
            
            return  m_get_UnderlineFunc(m_ptr, ref pUnderline);
        }
        delegate int get_UnderlineFunc(IntPtr self, ref int pUnderline);
        get_UnderlineFunc m_get_UnderlineFunc;

        public int put_Underline(int underline)
        {
            if(m_put_UnderlineFunc==null){
                var fp = GetFunctionPointer(12);
                m_put_UnderlineFunc = (put_UnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_UnderlineFunc));
            } 
            
            return  m_put_UnderlineFunc(m_ptr, underline);
        }
        delegate int put_UnderlineFunc(IntPtr self, int underline);
        put_UnderlineFunc m_put_UnderlineFunc;

        public int get_Strikethrough(ref int pStrikethrough)
        {
            if(m_get_StrikethroughFunc==null){
                var fp = GetFunctionPointer(13);
                m_get_StrikethroughFunc = (get_StrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_StrikethroughFunc));
            } 
            
            return  m_get_StrikethroughFunc(m_ptr, ref pStrikethrough);
        }
        delegate int get_StrikethroughFunc(IntPtr self, ref int pStrikethrough);
        get_StrikethroughFunc m_get_StrikethroughFunc;

        public int put_Strikethrough(int strikethrough)
        {
            if(m_put_StrikethroughFunc==null){
                var fp = GetFunctionPointer(14);
                m_put_StrikethroughFunc = (put_StrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_StrikethroughFunc));
            } 
            
            return  m_put_StrikethroughFunc(m_ptr, strikethrough);
        }
        delegate int put_StrikethroughFunc(IntPtr self, int strikethrough);
        put_StrikethroughFunc m_put_StrikethroughFunc;

        public int get_Weight(ref short pWeight)
        {
            if(m_get_WeightFunc==null){
                var fp = GetFunctionPointer(15);
                m_get_WeightFunc = (get_WeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_WeightFunc));
            } 
            
            return  m_get_WeightFunc(m_ptr, ref pWeight);
        }
        delegate int get_WeightFunc(IntPtr self, ref short pWeight);
        get_WeightFunc m_get_WeightFunc;

        public int put_Weight(short weight)
        {
            if(m_put_WeightFunc==null){
                var fp = GetFunctionPointer(16);
                m_put_WeightFunc = (put_WeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_WeightFunc));
            } 
            
            return  m_put_WeightFunc(m_ptr, weight);
        }
        delegate int put_WeightFunc(IntPtr self, short weight);
        put_WeightFunc m_put_WeightFunc;

        public int get_Charset(ref short pCharset)
        {
            if(m_get_CharsetFunc==null){
                var fp = GetFunctionPointer(17);
                m_get_CharsetFunc = (get_CharsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_CharsetFunc));
            } 
            
            return  m_get_CharsetFunc(m_ptr, ref pCharset);
        }
        delegate int get_CharsetFunc(IntPtr self, ref short pCharset);
        get_CharsetFunc m_get_CharsetFunc;

        public int put_Charset(short charset)
        {
            if(m_put_CharsetFunc==null){
                var fp = GetFunctionPointer(18);
                m_put_CharsetFunc = (put_CharsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(put_CharsetFunc));
            } 
            
            return  m_put_CharsetFunc(m_ptr, charset);
        }
        delegate int put_CharsetFunc(IntPtr self, short charset);
        put_CharsetFunc m_put_CharsetFunc;

        public int get_hFont(ref HFONT phFont)
        {
            if(m_get_hFontFunc==null){
                var fp = GetFunctionPointer(19);
                m_get_hFontFunc = (get_hFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(get_hFontFunc));
            } 
            
            return  m_get_hFontFunc(m_ptr, ref phFont);
        }
        delegate int get_hFontFunc(IntPtr self, ref HFONT phFont);
        get_hFontFunc m_get_hFontFunc;

        public int Clone(ref IntPtr ppFont)
        {
            if(m_CloneFunc==null){
                var fp = GetFunctionPointer(20);
                m_CloneFunc = (CloneFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloneFunc));
            } 
            
            return  m_CloneFunc(m_ptr, ref ppFont);
        }
        delegate int CloneFunc(IntPtr self, ref IntPtr ppFont);
        CloneFunc m_CloneFunc;

        public int IsEqual(IntPtr pFontOther)
        {
            if(m_IsEqualFunc==null){
                var fp = GetFunctionPointer(21);
                m_IsEqualFunc = (IsEqualFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsEqualFunc));
            } 
            
            return  m_IsEqualFunc(m_ptr, pFontOther);
        }
        delegate int IsEqualFunc(IntPtr self, IntPtr pFontOther);
        IsEqualFunc m_IsEqualFunc;

        public int SetRatio(int cyLogical, int cyHimetric)
        {
            if(m_SetRatioFunc==null){
                var fp = GetFunctionPointer(22);
                m_SetRatioFunc = (SetRatioFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRatioFunc));
            } 
            
            return  m_SetRatioFunc(m_ptr, cyLogical, cyHimetric);
        }
        delegate int SetRatioFunc(IntPtr self, int cyLogical, int cyHimetric);
        SetRatioFunc m_SetRatioFunc;

        public int QueryTextMetrics(IntPtr pTM)
        {
            if(m_QueryTextMetricsFunc==null){
                var fp = GetFunctionPointer(23);
                m_QueryTextMetricsFunc = (QueryTextMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryTextMetricsFunc));
            } 
            
            return  m_QueryTextMetricsFunc(m_ptr, pTM);
        }
        delegate int QueryTextMetricsFunc(IntPtr self, IntPtr pTM);
        QueryTextMetricsFunc m_QueryTextMetricsFunc;

        public int AddRefHfont(HFONT hFont)
        {
            if(m_AddRefHfontFunc==null){
                var fp = GetFunctionPointer(24);
                m_AddRefHfontFunc = (AddRefHfontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefHfontFunc));
            } 
            
            return  m_AddRefHfontFunc(m_ptr, hFont);
        }
        delegate int AddRefHfontFunc(IntPtr self, HFONT hFont);
        AddRefHfontFunc m_AddRefHfontFunc;

        public int ReleaseHfont(HFONT hFont)
        {
            if(m_ReleaseHfontFunc==null){
                var fp = GetFunctionPointer(25);
                m_ReleaseHfontFunc = (ReleaseHfontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseHfontFunc));
            } 
            
            return  m_ReleaseHfontFunc(m_ptr, hFont);
        }
        delegate int ReleaseHfontFunc(IntPtr self, HFONT hFont);
        ReleaseHfontFunc m_ReleaseHfontFunc;

        public int SetHdc(HDC hDC)
        {
            if(m_SetHdcFunc==null){
                var fp = GetFunctionPointer(26);
                m_SetHdcFunc = (SetHdcFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetHdcFunc));
            } 
            
            return  m_SetHdcFunc(m_ptr, hDC);
        }
        delegate int SetHdcFunc(IntPtr self, HDC hDC);
        SetHdcFunc m_SetHdcFunc;

    }
}
