// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OCIdl.h:1456
    public class IOleControl : IUnknown
    {
        static Guid s_uuid = new Guid("b196b288-bab4-101a-b69c-00aa00341d07");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int GetControlInfo(ref CONTROLINFO pCI)
        {
            if(m_GetControlInfoFunc==null){
                var fp = GetFunctionPointer(3);
                m_GetControlInfoFunc = (GetControlInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetControlInfoFunc));
            } 
            return  m_GetControlInfoFunc(m_ptr, ref pCI);
        }
        delegate int GetControlInfoFunc(IntPtr self, ref CONTROLINFO pCI);
        GetControlInfoFunc m_GetControlInfoFunc;

        public int OnMnemonic(ref MSG pMsg)
        {
            if(m_OnMnemonicFunc==null){
                var fp = GetFunctionPointer(4);
                m_OnMnemonicFunc = (OnMnemonicFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OnMnemonicFunc));
            } 
            return  m_OnMnemonicFunc(m_ptr, ref pMsg);
        }
        delegate int OnMnemonicFunc(IntPtr self, ref MSG pMsg);
        OnMnemonicFunc m_OnMnemonicFunc;

        public int OnAmbientPropertyChange(int dispID)
        {
            if(m_OnAmbientPropertyChangeFunc==null){
                var fp = GetFunctionPointer(5);
                m_OnAmbientPropertyChangeFunc = (OnAmbientPropertyChangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OnAmbientPropertyChangeFunc));
            } 
            return  m_OnAmbientPropertyChangeFunc(m_ptr, dispID);
        }
        delegate int OnAmbientPropertyChangeFunc(IntPtr self, int dispID);
        OnAmbientPropertyChangeFunc m_OnAmbientPropertyChangeFunc;

        public int FreezeEvents(int bFreeze)
        {
            if(m_FreezeEventsFunc==null){
                var fp = GetFunctionPointer(6);
                m_FreezeEventsFunc = (FreezeEventsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FreezeEventsFunc));
            } 
            return  m_FreezeEventsFunc(m_ptr, bFreeze);
        }
        delegate int FreezeEventsFunc(IntPtr self, int bFreeze);
        FreezeEventsFunc m_FreezeEventsFunc;

    }
}
