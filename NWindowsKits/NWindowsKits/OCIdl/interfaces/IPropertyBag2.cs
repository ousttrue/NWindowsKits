// This source code was generated by ClangCaster
using System;
using System.Runtime.InteropServices;

namespace NWindowsKits
{
    // C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um/OCIdl.h:6032
    public class IPropertyBag2 : IUnknown // 1
    {
        static Guid s_uuid = new Guid("22f55882-280b-11d0-a8a9-00a0c90c2004");
        public static new ref Guid IID => ref s_uuid;
        public override ref Guid GetIID() { return ref s_uuid; }

        public int Read(uint cProperties, ref PROPBAG2 pPropBag, IntPtr pErrLog, ref VARIANT pvarValue, ref int phrError)
        {
            if(m_ReadFunc==null){
                var fp = GetFunctionPointer(3);
                m_ReadFunc = (ReadFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReadFunc));
            } 
            
            return  m_ReadFunc(m_ptr, cProperties, ref pPropBag, pErrLog, ref pvarValue, ref phrError);
        }
        delegate int ReadFunc(IntPtr self, uint cProperties, ref PROPBAG2 pPropBag, IntPtr pErrLog, ref VARIANT pvarValue, ref int phrError);
        ReadFunc m_ReadFunc;

        public int Write(uint cProperties, ref PROPBAG2 pPropBag, ref VARIANT pvarValue)
        {
            if(m_WriteFunc==null){
                var fp = GetFunctionPointer(4);
                m_WriteFunc = (WriteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteFunc));
            } 
            
            return  m_WriteFunc(m_ptr, cProperties, ref pPropBag, ref pvarValue);
        }
        delegate int WriteFunc(IntPtr self, uint cProperties, ref PROPBAG2 pPropBag, ref VARIANT pvarValue);
        WriteFunc m_WriteFunc;

        public int CountProperties(IntPtr pcProperties)
        {
            if(m_CountPropertiesFunc==null){
                var fp = GetFunctionPointer(5);
                m_CountPropertiesFunc = (CountPropertiesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CountPropertiesFunc));
            } 
            
            return  m_CountPropertiesFunc(m_ptr, pcProperties);
        }
        delegate int CountPropertiesFunc(IntPtr self, IntPtr pcProperties);
        CountPropertiesFunc m_CountPropertiesFunc;

        public int GetPropertyInfo(uint iProperty, uint cProperties, ref PROPBAG2 pPropBag, IntPtr pcProperties)
        {
            if(m_GetPropertyInfoFunc==null){
                var fp = GetFunctionPointer(6);
                m_GetPropertyInfoFunc = (GetPropertyInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPropertyInfoFunc));
            } 
            
            return  m_GetPropertyInfoFunc(m_ptr, iProperty, cProperties, ref pPropBag, pcProperties);
        }
        delegate int GetPropertyInfoFunc(IntPtr self, uint iProperty, uint cProperties, ref PROPBAG2 pPropBag, IntPtr pcProperties);
        GetPropertyInfoFunc m_GetPropertyInfoFunc;

        public int LoadObject(IntPtr pstrName, uint dwHint, IntPtr pUnkObject, IntPtr pErrLog)
        {
            if(m_LoadObjectFunc==null){
                var fp = GetFunctionPointer(7);
                m_LoadObjectFunc = (LoadObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadObjectFunc));
            } 
            
            return  m_LoadObjectFunc(m_ptr, pstrName, dwHint, pUnkObject, pErrLog);
        }
        delegate int LoadObjectFunc(IntPtr self, IntPtr pstrName, uint dwHint, IntPtr pUnkObject, IntPtr pErrLog);
        LoadObjectFunc m_LoadObjectFunc;

    }
}
